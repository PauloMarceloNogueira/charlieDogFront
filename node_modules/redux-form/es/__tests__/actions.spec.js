"use strict";

var _actionTypes = require("../actionTypes");

var _actions = _interopRequireDefault(require("../actions"));

var _fluxStandardAction = require("flux-standard-action");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var arrayInsert = _actions.default.arrayInsert,
    arrayMove = _actions.default.arrayMove,
    arrayPop = _actions.default.arrayPop,
    arrayPush = _actions.default.arrayPush,
    arrayRemove = _actions.default.arrayRemove,
    arrayRemoveAll = _actions.default.arrayRemoveAll,
    arrayShift = _actions.default.arrayShift,
    arraySplice = _actions.default.arraySplice,
    arraySwap = _actions.default.arraySwap,
    arrayUnshift = _actions.default.arrayUnshift,
    blur = _actions.default.blur,
    change = _actions.default.change,
    clearSubmit = _actions.default.clearSubmit,
    clearSubmitErrors = _actions.default.clearSubmitErrors,
    clearFields = _actions.default.clearFields,
    destroy = _actions.default.destroy,
    focus = _actions.default.focus,
    initialize = _actions.default.initialize,
    registerField = _actions.default.registerField,
    reset = _actions.default.reset,
    resetSection = _actions.default.resetSection,
    setSubmitFailed = _actions.default.setSubmitFailed,
    setSubmitSucceeded = _actions.default.setSubmitSucceeded,
    startAsyncValidation = _actions.default.startAsyncValidation,
    startSubmit = _actions.default.startSubmit,
    stopAsyncValidation = _actions.default.stopAsyncValidation,
    stopSubmit = _actions.default.stopSubmit,
    submit = _actions.default.submit,
    touch = _actions.default.touch,
    unregisterField = _actions.default.unregisterField,
    untouch = _actions.default.untouch,
    updateSyncErrors = _actions.default.updateSyncErrors,
    updateSyncWarnings = _actions.default.updateSyncWarnings,
    clearAsyncError = _actions.default.clearAsyncError;
describe('actions', function () {
  it('should create array insert action', function () {
    expect(arrayInsert('myForm', 'myField', 0, 'foo')).toEqual({
      type: _actionTypes.ARRAY_INSERT,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 0
      },
      payload: 'foo'
    });
    expect((0, _fluxStandardAction.isFSA)(arrayInsert('myForm', 'myField', 0, 'foo'))).toBe(true);
  });
  it('should create array move action', function () {
    expect(arrayMove('myForm', 'myField', 2, 4)).toEqual({
      type: _actionTypes.ARRAY_MOVE,
      meta: {
        form: 'myForm',
        field: 'myField',
        from: 2,
        to: 4
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arrayMove('myForm', 'myField', 2, 4))).toBe(true);
  });
  it('should create array pop action', function () {
    expect(arrayPop('myForm', 'myField')).toEqual({
      type: _actionTypes.ARRAY_POP,
      meta: {
        form: 'myForm',
        field: 'myField'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arrayPop('myForm', 'myField'))).toBe(true);
  });
  it('should create array push action', function () {
    expect(arrayPush('myForm', 'myField', 'foo')).toEqual({
      type: _actionTypes.ARRAY_PUSH,
      meta: {
        form: 'myForm',
        field: 'myField'
      },
      payload: 'foo'
    });
    expect((0, _fluxStandardAction.isFSA)(arrayPush('myForm', 'myField', 'foo'))).toBe(true);
    expect(arrayPush('myForm', 'myField')).toEqual({
      type: _actionTypes.ARRAY_PUSH,
      meta: {
        form: 'myForm',
        field: 'myField'
      },
      payload: undefined
    });
    expect((0, _fluxStandardAction.isFSA)(arrayPush('myForm', 'myField'))).toBe(true);
  });
  it('should create array remove action', function () {
    expect(arrayRemove('myForm', 'myField', 3)).toEqual({
      type: _actionTypes.ARRAY_REMOVE,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 3
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arrayRemove('myForm', 'myField', 3))).toBe(true);
  });
  it('should create array removeAll action', function () {
    expect(arrayRemoveAll('myForm', 'myField')).toEqual({
      type: _actionTypes.ARRAY_REMOVE_ALL,
      meta: {
        form: 'myForm',
        field: 'myField'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arrayRemoveAll('myForm', 'myField'))).toBe(true);
  });
  it('should create array shift action', function () {
    expect(arrayShift('myForm', 'myField')).toEqual({
      type: _actionTypes.ARRAY_SHIFT,
      meta: {
        form: 'myForm',
        field: 'myField'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arrayShift('myForm', 'myField'))).toBe(true);
  });
  it('should create array splice action', function () {
    expect(arraySplice('myForm', 'myField', 1, 1)).toEqual({
      type: _actionTypes.ARRAY_SPLICE,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 1,
        removeNum: 1
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arraySplice('myForm', 'myField', 1, 1))).toBe(true);
    expect(arraySplice('myForm', 'myField', 2, 1)).toEqual({
      type: _actionTypes.ARRAY_SPLICE,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 2,
        removeNum: 1
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arraySplice('myForm', 'myField', 2, 1))).toBe(true);
    expect(arraySplice('myForm', 'myField', 2, 0, 'foo')).toEqual({
      type: _actionTypes.ARRAY_SPLICE,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 2,
        removeNum: 0
      },
      payload: 'foo'
    });
    expect((0, _fluxStandardAction.isFSA)(arraySplice('myForm', 'myField', 2, 0, 'foo'))).toBe(true);
    expect(arraySplice('myForm', 'myField', 3, 2, {
      foo: 'bar'
    })).toEqual({
      type: _actionTypes.ARRAY_SPLICE,
      meta: {
        form: 'myForm',
        field: 'myField',
        index: 3,
        removeNum: 2
      },
      payload: {
        foo: 'bar'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arraySplice('myForm', 'myField', 3, 2, {
      foo: 'bar'
    }))).toBe(true);
  });
  it('should create array unshift action', function () {
    expect(arrayUnshift('myForm', 'myField', 'foo')).toEqual({
      type: _actionTypes.ARRAY_UNSHIFT,
      meta: {
        form: 'myForm',
        field: 'myField'
      },
      payload: 'foo'
    });
    expect((0, _fluxStandardAction.isFSA)(arrayUnshift('myForm', 'myField', 'foo'))).toBe(true);
  });
  it('should create array swap action', function () {
    expect(arraySwap('myForm', 'myField', 0, 8)).toEqual({
      type: _actionTypes.ARRAY_SWAP,
      meta: {
        form: 'myForm',
        field: 'myField',
        indexA: 0,
        indexB: 8
      }
    });
    expect((0, _fluxStandardAction.isFSA)(arraySwap('myForm', 'myField', 0, 8))).toBe(true);
  });
  it('should throw an exception with illegal array swap indices', function () {
    expect(function () {
      return arraySwap('myForm', 'myField', 2, 2);
    }).toThrow('Swap indices cannot be equal');
    expect(function () {
      return arraySwap('myForm', 'myField', -2, 2);
    }).toThrow('Swap indices cannot be negative');
    expect(function () {
      return arraySwap('myForm', 'myField', 2, -2);
    }).toThrow('Swap indices cannot be negative');
  });
  it('should create blur action', function () {
    expect(blur('myForm', 'myField', 'bar', false)).toEqual({
      type: _actionTypes.BLUR,
      meta: {
        form: 'myForm',
        field: 'myField',
        touch: false
      },
      payload: 'bar'
    });
    expect((0, _fluxStandardAction.isFSA)(blur('myForm', 'myField', 'bar', false))).toBe(true);
    expect(blur('myForm', 'myField', 7, true)).toEqual({
      type: _actionTypes.BLUR,
      meta: {
        form: 'myForm',
        field: 'myField',
        touch: true
      },
      payload: 7
    });
    expect((0, _fluxStandardAction.isFSA)(blur('myForm', 'myField', 7, true))).toBe(true);
  });
  it('should create change action', function () {
    expect(change('myForm', 'myField', 'bar', false, true)).toEqual({
      type: _actionTypes.CHANGE,
      meta: {
        form: 'myForm',
        field: 'myField',
        touch: false,
        persistentSubmitErrors: true
      },
      payload: 'bar'
    });
    expect((0, _fluxStandardAction.isFSA)(change('myForm', 'myField', 'bar', false, true))).toBe(true);
    expect(change('myForm', 'myField', 7, true, false)).toEqual({
      type: _actionTypes.CHANGE,
      meta: {
        form: 'myForm',
        field: 'myField',
        touch: true,
        persistentSubmitErrors: false
      },
      payload: 7
    });
    expect((0, _fluxStandardAction.isFSA)(change('myForm', 'myField', 7, true, false))).toBe(true);
  });
  it('should create focus action', function () {
    expect(focus('myForm', 'myField')).toEqual({
      type: _actionTypes.FOCUS,
      meta: {
        form: 'myForm',
        field: 'myField'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(focus('myForm', 'myField'))).toBe(true);
  });
  it('should create clear submit action', function () {
    expect(clearSubmit('myForm')).toEqual({
      type: _actionTypes.CLEAR_SUBMIT,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(clearSubmit('myForm'))).toBe(true);
  });
  it('should create clear submit errors action', function () {
    expect(clearSubmitErrors('myForm')).toEqual({
      type: _actionTypes.CLEAR_SUBMIT_ERRORS,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(clearSubmitErrors('myForm'))).toBe(true);
  });
  it('should create clear fields action', function () {
    expect(clearFields('myForm', true, true, 'a', 'b')).toEqual({
      type: _actionTypes.CLEAR_FIELDS,
      meta: {
        form: 'myForm',
        keepTouched: true,
        persistentSubmitErrors: true,
        fields: ['a', 'b']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(clearSubmitErrors('myForm'))).toBe(true);
  });
  it('should create initialize action', function () {
    var data = {
      a: 8,
      c: 9
    };
    expect(initialize('myForm', data)).toEqual({
      type: _actionTypes.INITIALIZE,
      meta: {
        form: 'myForm',
        keepDirty: undefined
      },
      payload: data
    });
    expect((0, _fluxStandardAction.isFSA)(initialize('myForm', data))).toBe(true);
  });
  it('should create initialize action with a keepDirty value', function () {
    var data = {
      a: 8,
      c: 9
    };
    expect(initialize('myForm', data, true)).toEqual({
      type: _actionTypes.INITIALIZE,
      meta: {
        form: 'myForm',
        keepDirty: true
      },
      payload: data
    });
    expect((0, _fluxStandardAction.isFSA)(initialize('myForm', data, true))).toBe(true);
  });
  it('should create registerField action', function () {
    expect(registerField('myForm', 'foo', 'Field')).toEqual({
      type: _actionTypes.REGISTER_FIELD,
      meta: {
        form: 'myForm'
      },
      payload: {
        name: 'foo',
        type: 'Field'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(registerField('myForm', 'foo', 'Field'))).toBe(true);
  });
  it('should create reset action', function () {
    expect(reset('myForm')).toEqual({
      type: _actionTypes.RESET,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(reset('myForm'))).toBe(true);
  });
  it('should create resetSection action', function () {
    expect(resetSection('myForm', 'mySection')).toEqual({
      type: _actionTypes.RESET_SECTION,
      meta: {
        form: 'myForm',
        sections: ['mySection']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(resetSection('myForm', 'mySection'))).toBe(true);
  });
  it('should create destroy action', function () {
    expect(destroy('myForm')).toEqual({
      type: _actionTypes.DESTROY,
      meta: {
        form: ['myForm']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(destroy('myForm'))).toBe(true);
    expect(destroy('myForm1', 'myForm2')).toEqual({
      type: _actionTypes.DESTROY,
      meta: {
        form: ['myForm1', 'myForm2']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(destroy('myForm1', 'myForm2'))).toBe(true);
  });
  it('should create startAsyncValidation action', function () {
    expect(startAsyncValidation('myForm', 'myField')).toEqual({
      type: _actionTypes.START_ASYNC_VALIDATION,
      meta: {
        form: 'myForm',
        field: 'myField'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(startAsyncValidation('myForm', 'myField'))).toBe(true);
  });
  it('should create startSubmit action', function () {
    expect(startSubmit('myForm')).toEqual({
      type: _actionTypes.START_SUBMIT,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(startSubmit('myForm'))).toBe(true);
  });
  it('should create startSubmit action', function () {
    expect(startSubmit('myForm')).toEqual({
      type: _actionTypes.START_SUBMIT,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(startSubmit('myForm'))).toBe(true);
  });
  it('should create stopAsyncValidation action', function () {
    var errors = {
      foo: 'Foo error',
      bar: 'Error for bar'
    };
    expect(stopAsyncValidation('myForm', errors)).toEqual({
      type: _actionTypes.STOP_ASYNC_VALIDATION,
      meta: {
        form: 'myForm'
      },
      payload: errors,
      error: true
    });
    expect((0, _fluxStandardAction.isFSA)(stopAsyncValidation('myForm', errors))).toBe(true);
  });
  it('should create stopSubmit action', function () {
    expect(stopSubmit('myForm')).toEqual({
      type: _actionTypes.STOP_SUBMIT,
      meta: {
        form: 'myForm'
      },
      payload: undefined,
      error: false
    });
    expect((0, _fluxStandardAction.isFSA)(stopSubmit('myForm'))).toBe(true);
    var errors = {
      foo: 'Foo error',
      bar: 'Error for bar'
    };
    expect(stopSubmit('myForm', errors)).toEqual({
      type: _actionTypes.STOP_SUBMIT,
      meta: {
        form: 'myForm'
      },
      payload: errors,
      error: true
    });
    expect((0, _fluxStandardAction.isFSA)(stopSubmit('myForm', errors))).toBe(true);
  });
  it('should create submit action', function () {
    expect(submit('myForm')).toEqual({
      type: _actionTypes.SUBMIT,
      meta: {
        form: 'myForm'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(submit('myForm'))).toBe(true);
  });
  it('should create setSubmitFailed action', function () {
    expect(setSubmitFailed('myForm')).toEqual({
      type: _actionTypes.SET_SUBMIT_FAILED,
      meta: {
        form: 'myForm',
        fields: []
      },
      error: true
    });
    expect((0, _fluxStandardAction.isFSA)(setSubmitFailed('myForm'))).toBe(true);
    expect(setSubmitFailed('myForm', 'a', 'b', 'c')).toEqual({
      type: _actionTypes.SET_SUBMIT_FAILED,
      meta: {
        form: 'myForm',
        fields: ['a', 'b', 'c']
      },
      error: true
    });
    expect((0, _fluxStandardAction.isFSA)(setSubmitFailed('myForm', 'a', 'b', 'c'))).toBe(true);
  });
  it('should create setSubmitSucceeded action', function () {
    expect(setSubmitSucceeded('myForm')).toEqual({
      type: _actionTypes.SET_SUBMIT_SUCCEEDED,
      meta: {
        form: 'myForm',
        fields: []
      },
      error: false
    });
    expect((0, _fluxStandardAction.isFSA)(setSubmitSucceeded('myForm'))).toBe(true);
    expect(setSubmitSucceeded('myForm', 'a', 'b', 'c')).toEqual({
      type: _actionTypes.SET_SUBMIT_SUCCEEDED,
      meta: {
        form: 'myForm',
        fields: ['a', 'b', 'c']
      },
      error: false
    });
    expect((0, _fluxStandardAction.isFSA)(setSubmitSucceeded('myForm', 'a', 'b', 'c'))).toBe(true);
  });
  it('should create touch action', function () {
    expect(touch('myForm', 'foo', 'bar')).toEqual({
      type: _actionTypes.TOUCH,
      meta: {
        form: 'myForm',
        fields: ['foo', 'bar']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(touch('myForm', 'foo', 'bar'))).toBe(true);
    expect(touch('myForm', 'cat', 'dog', 'pig')).toEqual({
      type: _actionTypes.TOUCH,
      meta: {
        form: 'myForm',
        fields: ['cat', 'dog', 'pig']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(touch('myForm', 'cat', 'dog', 'pig'))).toBe(true);
  });
  it('should create unregisterField action', function () {
    expect(unregisterField('myForm', 'foo')).toEqual({
      type: _actionTypes.UNREGISTER_FIELD,
      meta: {
        form: 'myForm'
      },
      payload: {
        name: 'foo',
        destroyOnUnmount: true
      }
    });
    expect((0, _fluxStandardAction.isFSA)(unregisterField('myForm', 'foo'))).toBe(true);
  });
  it('should create untouch action', function () {
    expect(untouch('myForm', 'foo', 'bar')).toEqual({
      type: _actionTypes.UNTOUCH,
      meta: {
        form: 'myForm',
        fields: ['foo', 'bar']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(untouch('myForm', 'foo', 'bar'))).toBe(true);
    expect(untouch('myForm', 'cat', 'dog', 'pig')).toEqual({
      type: _actionTypes.UNTOUCH,
      meta: {
        form: 'myForm',
        fields: ['cat', 'dog', 'pig']
      }
    });
    expect((0, _fluxStandardAction.isFSA)(untouch('myForm', 'cat', 'dog', 'pig'))).toBe(true);
  });
  it('should create updateSyncErrors action', function () {
    expect(updateSyncErrors('myForm', {
      foo: 'foo error'
    })).toEqual({
      type: _actionTypes.UPDATE_SYNC_ERRORS,
      meta: {
        form: 'myForm'
      },
      payload: {
        error: undefined,
        syncErrors: {
          foo: 'foo error'
        }
      }
    });
    expect((0, _fluxStandardAction.isFSA)(updateSyncErrors('myForm', {
      foo: 'foo error'
    }))).toBe(true);
  });
  it('should create updateSyncErrors action with no errors if none given', function () {
    expect(updateSyncErrors('myForm')).toEqual({
      type: _actionTypes.UPDATE_SYNC_ERRORS,
      meta: {
        form: 'myForm'
      },
      payload: {
        error: undefined,
        syncErrors: {}
      }
    });
    expect((0, _fluxStandardAction.isFSA)(updateSyncErrors('myForm'))).toBe(true);
  });
  it('should create updateSyncWarnings action', function () {
    expect(updateSyncWarnings('myForm', {
      foo: 'foo warning'
    })).toEqual({
      type: _actionTypes.UPDATE_SYNC_WARNINGS,
      meta: {
        form: 'myForm'
      },
      payload: {
        warning: undefined,
        syncWarnings: {
          foo: 'foo warning'
        }
      }
    });
    expect((0, _fluxStandardAction.isFSA)(updateSyncWarnings('myForm', {
      foo: 'foo warning'
    }))).toBe(true);
  });
  it('should create updateSyncWarnings action with no warnings if none given', function () {
    expect(updateSyncWarnings('myForm')).toEqual({
      type: _actionTypes.UPDATE_SYNC_WARNINGS,
      meta: {
        form: 'myForm'
      },
      payload: {
        warning: undefined,
        syncWarnings: {}
      }
    });
    expect((0, _fluxStandardAction.isFSA)(updateSyncWarnings('myForm'))).toBe(true);
  });
  it('should create clearAsyncError action', function () {
    expect(clearAsyncError('myForm', 'foo')).toEqual({
      type: _actionTypes.CLEAR_ASYNC_ERROR,
      meta: {
        form: 'myForm',
        field: 'foo'
      }
    });
    expect((0, _fluxStandardAction.isFSA)(clearAsyncError('myForm', 'foo'))).toBe(true);
  });
});