"use strict";

var _react = _interopRequireWildcard(require("react"));

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _createField = _interopRequireDefault(require("../createField"));

var _createFieldArray = _interopRequireDefault(require("../createFieldArray"));

var _createFields = _interopRequireDefault(require("../createFields"));

var _FormSection = _interopRequireDefault(require("../FormSection"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations2 = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var describeFieldArray = function describeFieldArray(name, structure, combineReducers, setup) {
  var reduxForm = (0, _createReduxForm.default)(structure);
  var FieldArray = (0, _createFieldArray.default)(structure);
  var Field = (0, _createField.default)(structure);
  var Fields = (0, _createFields.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var allowsArrayErrors = structure.allowsArrayErrors,
      fromJS = structure.fromJS,
      getIn = structure.getIn,
      size = structure.size;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  var TestComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(TestComponent, _Component);

    function TestComponent() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = TestComponent.prototype;

    _proto.render = function render() {
      return _react.default.createElement("div", null, "TEST INPUT");
    };

    return TestComponent;
  }(_react.Component);

  var testProps = function testProps(state, config) {
    if (config === void 0) {
      config = {};
    }

    var store = makeStore({
      testForm: state
    });

    var Form =
    /*#__PURE__*/
    function (_Component2) {
      _inheritsLoose(Form, _Component2);

      function Form() {
        return _Component2.apply(this, arguments) || this;
      }

      var _proto2 = Form.prototype;

      _proto2.render = function render() {
        return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
          name: "foo",
          component: TestComponent
        }));
      };

      return Form;
    }(_react.Component);

    var TestForm = reduxForm(_extends({
      form: 'testForm'
    }, config))(Form);

    var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(TestForm, null)));

    return _testUtils.default.findRenderedComponentWithType(dom, TestComponent).props;
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should throw an error if not in ReduxForm', function () {
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement("div", null, _react.default.createElement(FieldArray, {
          name: "foo",
          component: TestComponent
        })));
      }).toThrow(/must be inside a component decorated with reduxForm/);
    });
    it('should throw an error if invalid component prop is provided', function () {
      var store = makeStore();
      var notAComponent = {};

      var Form =
      /*#__PURE__*/
      function (_Component3) {
        _inheritsLoose(Form, _Component3);

        function Form() {
          return _Component3.apply(this, arguments) || this;
        }

        var _proto3 = Form.prototype;

        _proto3.render = function render() {
          return _react.default.createElement(FieldArray, {
            component: notAComponent
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/Element type is invalid/);
    });
    it('should get length from Redux state', function () {
      var props = testProps({
        values: {
          foo: ['a', 'b', 'c']
        }
      });
      expect(props.fields.length).toBe(3);
    });
    it('should be okay with no array value', function () {
      var iterate = jest.fn();
      var props = testProps({
        values: {}
      });
      expect(props.fields.length).toBe(0);
      props.fields.forEach(iterate);
      props.fields.map(iterate);
      expect(iterate).not.toHaveBeenCalled();
    });
    it('should get dirty/pristine from Redux state', function () {
      var props1 = testProps({
        initial: {
          foo: ['a', 'b', 'c']
        },
        values: {
          foo: ['a', 'b', 'c']
        }
      });
      expect(props1.meta.pristine).toBe(true);
      expect(props1.meta.dirty).toBe(false);
      var props2 = testProps({
        initial: {
          foo: ['a', 'b', 'c']
        },
        values: {
          foo: ['a', 'b']
        }
      });
      expect(props2.meta.pristine).toBe(false);
      expect(props2.meta.dirty).toBe(true);
    });
    it('should provided meta.form', function () {
      var props = testProps({});
      expect(props.meta.form).toBe('testForm');
    });
    it('should not pass api props into custom', function () {
      var store = makeStore();
      var renderSpy = jest.fn();

      var ArrayComponent =
      /*#__PURE__*/
      function (_Component4) {
        _inheritsLoose(ArrayComponent, _Component4);

        function ArrayComponent() {
          return _Component4.apply(this, arguments) || this;
        }

        var _proto4 = ArrayComponent.prototype;

        _proto4.render = function render() {
          renderSpy(this.props);
          return _react.default.createElement("div", null);
        };

        return ArrayComponent;
      }(_react.Component);

      var apiProps = {
        // all the official API props you can pass to Field
        component: ArrayComponent,
        name: 'foo',
        props: {},
        validate: function validate() {
          return undefined;
        },
        warn: function warn() {
          return undefined;
        },
        forwardRef: true
      };

      var Form =
      /*#__PURE__*/
      function (_Component5) {
        _inheritsLoose(Form, _Component5);

        function Form() {
          return _Component5.apply(this, arguments) || this;
        }

        var _proto5 = Form.prototype;

        _proto5.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, apiProps));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderSpy).toHaveBeenCalled();
      var props = renderSpy.mock.calls[0][0];
      Object.keys(apiProps).forEach(function (key) {
        return expect(props[key]).toBeFalsy();
      });
    });
    it('should provide name', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(props.fields.name).toBe('foo');
    });
    it('should prefix name when inside FormSection', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: []
          }
        }
      });

      var Form =
      /*#__PURE__*/
      function (_Component6) {
        _inheritsLoose(Form, _Component6);

        function Form() {
          return _Component6.apply(this, arguments) || this;
        }

        var _proto6 = Form.prototype;

        _proto6.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: TestComponent
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var props = _testUtils.default.findRenderedComponentWithType(dom, TestComponent).props;

      expect(props.fields.name).toBe('foo.bar');
    });
    it('should provide forEach', function () {
      var props = testProps({
        values: {
          foo: ['a', 'b', 'c']
        }
      });
      expect(typeof props.fields.forEach).toBe('function');
      var iterate = jest.fn();
      props.fields.forEach(iterate);
      expect(iterate).toHaveBeenCalled();
      expect(iterate).toHaveBeenCalledTimes(3);
      expect(iterate.mock.calls[0]).toEqual(['foo[0]', 0, props.fields]);
      expect(iterate.mock.calls[1]).toEqual(['foo[1]', 1, props.fields]);
      expect(iterate.mock.calls[2]).toEqual(['foo[2]', 2, props.fields]);
    });
    it('should provide map', function () {
      var props = testProps({
        values: {
          foo: ['a', 'b', 'c']
        }
      });
      expect(typeof props.fields.map).toBe('function');
      var iterate = jest.fn();
      props.fields.map(iterate);
      expect(iterate).toHaveBeenCalled();
      expect(iterate).toHaveBeenCalledTimes(3);
      expect(iterate.mock.calls[0]).toEqual(['foo[0]', 0, props.fields]);
      expect(iterate.mock.calls[1]).toEqual(['foo[1]', 1, props.fields]);
      expect(iterate.mock.calls[2]).toEqual(['foo[2]', 2, props.fields]);
    });
    it('should provide insert', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.insert).toBe('function');
    });
    it('should provide push', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.push).toBe('function');
    });
    it('should provide pop', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.pop).toBe('function');
    });
    it('should provide shift', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.shift).toBe('function');
    });
    it('should provide unshift', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.unshift).toBe('function');
    });
    it('should provide move', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.move).toBe('function');
    });
    it('should provide remove', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.remove).toBe('function');
    });
    it('should provide removeAll', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.removeAll).toBe('function');
    });
    it('should provide swap', function () {
      var props = testProps({
        values: {
          foo: []
        }
      });
      expect(typeof props.fields.swap).toBe('function');
    });
    it('should provide pass through other props', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });
      var renderArray = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component7) {
        _inheritsLoose(Form, _Component7);

        function Form() {
          return _Component7.apply(this, arguments) || this;
        }

        var _proto7 = Form.prototype;

        _proto7.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray,
            otherProp: "dog",
            anotherProp: "cat"
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].fields.length).toBe(1);
      expect(renderArray.mock.calls[0][0].otherProp).toBe('dog');
      expect(renderArray.mock.calls[0][0].anotherProp).toBe('cat');
    });
    it('should provide access to rendered component', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });

      var TestComponent =
      /*#__PURE__*/
      function (_Component8) {
        _inheritsLoose(TestComponent, _Component8);

        function TestComponent() {
          return _Component8.apply(this, arguments) || this;
        }

        var _proto8 = TestComponent.prototype;

        _proto8.render = function render() {
          return _react.default.createElement("div", null, "TEST INPUT");
        };

        return TestComponent;
      }(_react.Component);

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component9) {
        _inheritsLoose(Form, _Component9);

        function Form() {
          return _Component9.apply(this, arguments) || this;
        }

        var _proto9 = Form.prototype;

        _proto9.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            forwardRef: true,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var component = _testUtils.default.findRenderedComponentWithType(dom, TestComponent);

      expect(ref.current.getRenderedComponent()).toBe(component);
    });
    it('should use initialValues', function () {
      var props = testProps({}, {
        initialValues: {
          foo: ['a', 'b', 'c']
        }
      });
      expect(props.fields.length).toBe(3);
      var iterate = jest.fn();
      props.fields.forEach(iterate);
      expect(iterate).toHaveBeenCalled();
      expect(iterate).toHaveBeenCalledTimes(3);
      expect(iterate.mock.calls[0][0]).toBe('foo[0]');
      expect(iterate.mock.calls[1][0]).toBe('foo[1]');
      expect(iterate.mock.calls[2][0]).toBe('foo[2]');
    });
    it('should get sync errors from outer reduxForm component', function () {
      var props = testProps({
        values: {
          foo: ['bar']
        }
      }, {
        validate: function validate() {
          return {
            foo: {
              _error: 'foo error'
            }
          };
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get sync warnings from outer reduxForm component', function () {
      var props = testProps({
        values: {
          foo: ['bar']
        }
      }, {
        warn: function warn() {
          return {
            foo: {
              _warning: 'foo warning'
            }
          };
        }
      });
      expect(props.meta.warning).toBe('foo warning');
    });
    it('should get async errors from Redux state', function () {
      var props = testProps({
        values: {
          foo: ['bar']
        },
        asyncErrors: {
          foo: {
            _error: 'foo error'
          }
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get submit errors from Redux state', function () {
      var props = testProps({
        values: {
          foo: ['bar']
        },
        submitErrors: {
          foo: {
            _error: 'foo error'
          }
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get submitFailed from Redux state', function () {
      var props = testProps({
        values: {
          foo: ['bar']
        },
        submitFailed: true
      });
      expect(props.meta.submitFailed).toBe(true);
    });
    it('should provide name getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component10) {
        _inheritsLoose(Form, _Component10);

        function Form() {
          return _Component10.apply(this, arguments) || this;
        }

        var _proto10 = Form.prototype;

        _proto10.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toEqual('foo');
    });
    it('should provide value getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component11) {
        _inheritsLoose(Form, _Component11);

        function Form() {
          return _Component11.apply(this, arguments) || this;
        }

        var _proto11 = Form.prototype;

        _proto11.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.value).toEqualMap(['bar']);
    });
    it('should provide dirty getter that is true when dirty', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: ['dog']
          },
          values: {
            foo: ['cat']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component12) {
        _inheritsLoose(Form, _Component12);

        function Form() {
          return _Component12.apply(this, arguments) || this;
        }

        var _proto12 = Form.prototype;

        _proto12.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(true);
    });
    it('should provide dirty getter that is false when pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: ['dog']
          },
          values: {
            foo: ['dog']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component13) {
        _inheritsLoose(Form, _Component13);

        function Form() {
          return _Component13.apply(this, arguments) || this;
        }

        var _proto13 = Form.prototype;

        _proto13.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(false);
    });
    it('should provide pristine getter that is true when pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: ['dog']
          },
          values: {
            foo: ['dog']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component14) {
        _inheritsLoose(Form, _Component14);

        function Form() {
          return _Component14.apply(this, arguments) || this;
        }

        var _proto14 = Form.prototype;

        _proto14.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(true);
    });
    it('should provide pristine getter that is false when dirty', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: ['dog']
          },
          values: {
            foo: ['cat']
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component15) {
        _inheritsLoose(Form, _Component15);

        function Form() {
          return _Component15.apply(this, arguments) || this;
        }

        var _proto15 = Form.prototype;

        _proto15.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: TestComponent,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(false);
    });
    it('should provide sync error for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: [{
              library: 'redux-form',
              author: 'erikras'
            }]
          }
        }
      });

      var validate = function validate() {
        return {
          foo: [{
            _error: 'Too awesome!'
          }]
        };
      };

      var renderArray = function renderArray(_ref) {
        var fields = _ref.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement("div", {
            key: index
          }, _react.default.createElement(Field, {
            name: name + ".library",
            component: "input"
          }), _react.default.createElement(Field, {
            name: name + ".author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: name,
            component: function component(props) {
              return _react.default.createElement("strong", null, props.meta.error);
            }
          }));
        }));
      };

      var Form =
      /*#__PURE__*/
      function (_Component16) {
        _inheritsLoose(Form, _Component16);

        function Form() {
          return _Component16.apply(this, arguments) || this;
        }

        var _proto16 = Form.prototype;

        _proto16.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var error = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'strong');

      expect(error.textContent).toBe('Too awesome!');
    });
    it('should provide sync warning for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: [{
              library: 'redux-form',
              author: 'erikras'
            }]
          }
        }
      });

      var warn = function warn() {
        return {
          foo: [{
            _warning: 'Too awesome!'
          }]
        };
      };

      var renderArray = function renderArray(_ref2) {
        var fields = _ref2.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement("div", {
            key: index
          }, _react.default.createElement(Field, {
            name: name + ".library",
            component: "input"
          }), _react.default.createElement(Field, {
            name: name + ".author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: name,
            component: function component(props) {
              return _react.default.createElement("strong", null, props.meta.warning);
            }
          }));
        }));
      };

      var Form =
      /*#__PURE__*/
      function (_Component17) {
        _inheritsLoose(Form, _Component17);

        function Form() {
          return _Component17.apply(this, arguments) || this;
        }

        var _proto17 = Form.prototype;

        _proto17.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var warning = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'strong');

      expect(warning.textContent).toBe('Too awesome!');
    });
    it('should reconnect when name changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['a', 'b'],
            bar: ['c']
          }
        }
      });
      var component = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component18) {
        _inheritsLoose(Form, _Component18);

        function Form() {
          var _this;

          _this = _Component18.call(this) || this;
          _this.state = {
            field: 'foo'
          };
          return _this;
        }

        var _proto18 = Form.prototype;

        _proto18.render = function render() {
          var _this2 = this;

          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: this.state.field,
            component: component
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this2.setState({
                field: 'bar'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(component).toHaveBeenCalled();
      expect(component).toHaveBeenCalledTimes(1);
      expect(component.mock.calls[0][0].fields.length).toBe(2);

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(component).toHaveBeenCalledTimes(2);
      expect(component.mock.calls[1][0].fields.length).toBe(1);
    });
    it('should not prefix name in fields map callback when inside FormSection', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: [{
                val: 'dog'
              }, {
                val: 'cat'
              }]
            }
          }
        }
      });

      var TestArray = function TestArray(_ref3) {
        var fields = _ref3.fields;
        return _react.default.createElement("div", null, fields.map(function (name) {
          return _react.default.createElement(Field, {
            key: name,
            name: name + ".val",
            component: TestComponent
          });
        }));
      };

      var Form =
      /*#__PURE__*/
      function (_Component19) {
        _inheritsLoose(Form, _Component19);

        function Form() {
          return _Component19.apply(this, arguments) || this;
        }

        var _proto19 = Form.prototype;

        _proto19.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: TestArray
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'FieldArray',
                count: 1
              },
              'foo.bar[0].val': {
                name: 'foo.bar[0].val',
                type: 'Field',
                count: 1
              },
              'foo.bar[1].val': {
                name: 'foo.bar[1].val',
                type: 'Field',
                count: 1
              }
            },
            values: {
              foo: {
                bar: [{
                  val: 'dog'
                }, {
                  val: 'cat'
                }]
              }
            }
          }
        }
      });

      var components = _testUtils.default.scryRenderedComponentsWithType(dom, TestComponent);

      expect(components[0].props.input.name).toBe('foo.bar[0].val');
      expect(components[1].props.input.name).toBe('foo.bar[1].val');
    });
    it('should prefix name getter when inside FormSection', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: [{
                val: 'dog'
              }, {
                val: 'cat'
              }]
            }
          }
        }
      });

      var TestArray = function TestArray(_ref4) {
        var fields = _ref4.fields;
        return _react.default.createElement("div", null, fields.map(function (name) {
          return _react.default.createElement(Field, {
            key: name,
            name: name + ".val",
            component: TestComponent
          });
        }));
      };

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component20) {
        _inheritsLoose(Form, _Component20);

        function Form() {
          return _Component20.apply(this, arguments) || this;
        }

        var _proto20 = Form.prototype;

        _proto20.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: TestArray,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toBe('foo.bar');
    });
    it('should not prefix name in fields map callback when inside multiple FormSection', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              fighter: {
                bar: [{
                  val: 'dog'
                }, {
                  val: 'cat'
                }]
              }
            }
          }
        }
      });

      var TestArray = function TestArray(_ref5) {
        var fields = _ref5.fields;
        return _react.default.createElement("div", null, fields.map(function (name) {
          return _react.default.createElement(Field, {
            key: name,
            name: name + ".val",
            component: TestComponent
          });
        }));
      };

      var Form =
      /*#__PURE__*/
      function (_Component21) {
        _inheritsLoose(Form, _Component21);

        function Form() {
          return _Component21.apply(this, arguments) || this;
        }

        var _proto21 = Form.prototype;

        _proto21.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: TestArray
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.fighter.bar': {
                name: 'foo.fighter.bar',
                type: 'FieldArray',
                count: 1
              },
              'foo.fighter.bar[0].val': {
                name: 'foo.fighter.bar[0].val',
                type: 'Field',
                count: 1
              },
              'foo.fighter.bar[1].val': {
                name: 'foo.fighter.bar[1].val',
                type: 'Field',
                count: 1
              }
            },
            values: {
              foo: {
                fighter: {
                  bar: [{
                    val: 'dog'
                  }, {
                    val: 'cat'
                  }]
                }
              }
            }
          }
        }
      });

      var components = _testUtils.default.scryRenderedComponentsWithType(dom, TestComponent);

      expect(components[0].props.input.name).toBe('foo.fighter.bar[0].val');
      expect(components[1].props.input.name).toBe('foo.fighter.bar[1].val');
    });
    it('should prefix name getter when inside multiple FormSection', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              fighter: {
                bar: [{
                  val: 'dog'
                }, {
                  val: 'cat'
                }]
              }
            }
          }
        }
      });

      var TestArray = function TestArray(_ref6) {
        var fields = _ref6.fields;
        return _react.default.createElement("div", null, fields.map(function (name) {
          return _react.default.createElement(Field, {
            key: name,
            name: name + ".val",
            component: TestComponent
          });
        }));
      };

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component22) {
        _inheritsLoose(Form, _Component22);

        function Form() {
          return _Component22.apply(this, arguments) || this;
        }

        var _proto22 = Form.prototype;

        _proto22.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: TestArray,
            ref: ref
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toBe('foo.fighter.bar');
    });
    it('should provide field-level sync error for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['dog', 'cat']
          }
        }
      });
      var renderArray = jest.fn(function (_ref7) {
        var fields = _ref7.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement(Field, {
            name: "" + name,
            component: "input",
            key: index
          });
        }));
      });
      var noMoreThanTwo = jest.fn(function (value) {
        return value && size(value) > 2 ? 'Too many' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component23) {
        _inheritsLoose(Form, _Component23);

        function Form() {
          return _Component23.apply(this, arguments) || this;
        }

        var _proto23 = Form.prototype;

        _proto23.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray,
            validate: noMoreThanTwo
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].meta.valid).toBe(true);
      expect(renderArray.mock.calls[0][0].meta.error).toBeFalsy();
      expect(noMoreThanTwo).toHaveBeenCalled();
      expect(noMoreThanTwo).toHaveBeenCalledTimes(1);
      expect(noMoreThanTwo.mock.calls[0][0]).toEqualMap(['dog', 'cat']);
      renderArray.mock.calls[0][0].fields.push('rat'); // should validate

      expect(noMoreThanTwo).toHaveBeenCalledTimes(2);
      expect(noMoreThanTwo.mock.calls[1][0]).toEqualMap(['dog', 'cat', 'rat']); // should rerender

      expect(renderArray).toHaveBeenCalledTimes(3);
      expect(renderArray.mock.calls[2][0].meta.valid).toBe(false);
      expect(renderArray.mock.calls[2][0].meta.error).toBe('Too many');
    });
    it('should provide field-level sync error for field added to a FieldArray that has been emptied', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['dog']
          }
        }
      });
      var required = jest.fn(function (value) {
        return value == null ? 'Required' : undefined;
      });
      var renderArray = jest.fn(function (_ref8) {
        var fields = _ref8.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement(Field, {
            name: "" + name,
            component: "input",
            key: index,
            validate: required
          });
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component24) {
        _inheritsLoose(Form, _Component24);

        function Form() {
          return _Component24.apply(this, arguments) || this;
        }

        var _proto24 = Form.prototype;

        _proto24.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].meta.valid).toBe(true);
      expect(renderArray.mock.calls[0][0].meta.error).toBeFalsy();
      expect(required).toHaveBeenCalled();
      expect(required).toHaveBeenCalledTimes(1);
      expect(required.mock.calls[0][0]).toEqual('dog');
      renderArray.mock.calls[0][0].fields.pop();
      required.mockClear();
      renderArray.mock.calls[0][0].fields.push('rat'); // should validate

      expect(required).toHaveBeenCalled();
      expect(required).toHaveBeenCalledTimes(1);
      expect(required.mock.calls[0][0]).toEqual('rat');
    });
    it('should provide field-level sync error (with multiple validators) for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['dog', 'cat']
          }
        }
      });
      var renderArray = jest.fn(function (_ref9) {
        var fields = _ref9.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement(Field, {
            name: "" + name,
            component: "input",
            key: index
          });
        }));
      });
      var atLeastOne = jest.fn(function (value) {
        return value && size(value) < 1 ? 'Too few' : undefined;
      });
      var noMoreThanTwo = jest.fn(function (value) {
        return value && size(value) > 2 ? 'Too many' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component25) {
        _inheritsLoose(Form, _Component25);

        function Form() {
          return _Component25.apply(this, arguments) || this;
        }

        var _proto25 = Form.prototype;

        _proto25.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray,
            validate: [atLeastOne, noMoreThanTwo]
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].meta.valid).toBe(true);
      expect(renderArray.mock.calls[0][0].meta.error).toBeFalsy();
      expect(noMoreThanTwo).toHaveBeenCalled();
      expect(noMoreThanTwo).toHaveBeenCalledTimes(1);
      expect(noMoreThanTwo.mock.calls[0][0]).toEqualMap(['dog', 'cat']);
      renderArray.mock.calls[0][0].fields.push('rat'); // should validate

      expect(noMoreThanTwo).toHaveBeenCalledTimes(2);
      expect(noMoreThanTwo.mock.calls[1][0]).toEqualMap(['dog', 'cat', 'rat']); // should rerender

      expect(renderArray).toHaveBeenCalledTimes(3);
      expect(renderArray.mock.calls[2][0].meta.valid).toBe(false);
      expect(renderArray.mock.calls[2][0].meta.error).toBe('Too many');
    });
    it('should provide field-level sync warning for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['dog', 'cat']
          }
        }
      });
      var renderArray = jest.fn(function (_ref10) {
        var fields = _ref10.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement(Field, {
            name: "" + name,
            component: "input",
            key: index
          });
        }));
      });
      var noMoreThanTwo = jest.fn(function (value) {
        return value && size(value) > 2 ? 'Too many' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component26) {
        _inheritsLoose(Form, _Component26);

        function Form() {
          return _Component26.apply(this, arguments) || this;
        }

        var _proto26 = Form.prototype;

        _proto26.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray,
            warn: noMoreThanTwo
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].meta.valid).toBe(true);
      expect(renderArray.mock.calls[0][0].meta.warning).toBeFalsy();
      expect(noMoreThanTwo).toHaveBeenCalled();
      expect(noMoreThanTwo).toHaveBeenCalledTimes(1);
      expect(noMoreThanTwo.mock.calls[0][0]).toEqualMap(['dog', 'cat']);
      renderArray.mock.calls[0][0].fields.push('rat'); // should validate

      expect(noMoreThanTwo).toHaveBeenCalledTimes(2);
      expect(noMoreThanTwo.mock.calls[1][0]).toEqualMap(['dog', 'cat', 'rat']); // should rerender

      expect(renderArray).toHaveBeenCalledTimes(3);
      expect(renderArray.mock.calls[2][0].meta.valid).toBe(true); // just a warning

      expect(renderArray.mock.calls[2][0].meta.warning).toBe('Too many');
    });
    it('should provide field-level sync warning (with multiple validators) for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['dog', 'cat']
          }
        }
      });
      var renderArray = jest.fn(function (_ref11) {
        var fields = _ref11.fields;
        return _react.default.createElement("div", null, fields.map(function (name, index) {
          return _react.default.createElement(Field, {
            name: "" + name,
            component: "input",
            key: index
          });
        }));
      });
      var atLeastOne = jest.fn(function (value) {
        return value && size(value) < 1 ? 'Too few' : undefined;
      });
      var noMoreThanTwo = jest.fn(function (value) {
        return value && size(value) > 2 ? 'Too many' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component27) {
        _inheritsLoose(Form, _Component27);

        function Form() {
          return _Component27.apply(this, arguments) || this;
        }

        var _proto27 = Form.prototype;

        _proto27.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: renderArray,
            warn: [atLeastOne, noMoreThanTwo]
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderArray).toHaveBeenCalled();
      expect(renderArray).toHaveBeenCalledTimes(1);
      expect(renderArray.mock.calls[0][0].meta.valid).toBe(true);
      expect(renderArray.mock.calls[0][0].meta.warning).toBeFalsy();
      expect(noMoreThanTwo).toHaveBeenCalled();
      expect(noMoreThanTwo).toHaveBeenCalledTimes(1);
      expect(noMoreThanTwo.mock.calls[0][0]).toEqualMap(['dog', 'cat']);
      renderArray.mock.calls[0][0].fields.push('rat'); // should validate

      expect(noMoreThanTwo).toHaveBeenCalledTimes(2);
      expect(noMoreThanTwo.mock.calls[1][0]).toEqualMap(['dog', 'cat', 'rat']); // should rerender

      expect(renderArray).toHaveBeenCalledTimes(3);
      expect(renderArray.mock.calls[2][0].meta.valid).toBe(true); // just a warning

      expect(renderArray.mock.calls[2][0].meta.warning).toBe('Too many');
    });
    it('should reconnect when props change', function () {
      var store = makeStore();
      var component = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component28) {
        _inheritsLoose(Form, _Component28);

        function Form() {
          var _this3;

          _this3 = _Component28.call(this) || this;
          _this3.state = {
            foo: 'foo',
            bar: 'bar'
          };
          return _this3;
        }

        var _proto28 = Form.prototype;

        _proto28.render = function render() {
          var _this4 = this;

          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            foo: this.state.foo,
            bar: this.state.bar,
            component: component
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this4.setState({
                foo: 'qux',
                bar: 'baz'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(component).toHaveBeenCalled();
      expect(component).toHaveBeenCalledTimes(1);
      expect(component.mock.calls[0][0].foo).toBe('foo');
      expect(component.mock.calls[0][0].bar).toBe('bar');

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(component).toHaveBeenCalledTimes(2);
      expect(component.mock.calls[1][0].foo).toBe('qux');
      expect(component.mock.calls[1][0].bar).toBe('baz');
    });
    it('should allow addition after focus', function () {
      var store = makeStore();
      var component = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component29) {
        _inheritsLoose(Form, _Component29);

        function Form() {
          var _this5;

          _this5 = _Component29.call(this) || this;
          _this5.state = {
            foo: 'foo',
            bar: 'bar'
          };
          return _this5;
        }

        var _proto29 = Form.prototype;

        _proto29.render = function render() {
          var _this6 = this;

          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            foo: this.state.foo,
            bar: this.state.bar,
            component: component
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this6.setState({
                foo: 'qux',
                bar: 'baz'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(component).toHaveBeenCalled();
      expect(component).toHaveBeenCalledTimes(1);
      expect(component.mock.calls[0][0].foo).toBe('foo');
      expect(component.mock.calls[0][0].bar).toBe('bar');

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(component).toHaveBeenCalledTimes(2);
      expect(component.mock.calls[1][0].foo).toBe('qux');
      expect(component.mock.calls[1][0].bar).toBe('baz');
    });
    it('should rerender when items added or removed', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref12) {
        var fields = _ref12.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          className: "add",
          onClick: function onClick() {
            return fields.push();
          }
        }, "Add Dog"), _react.default.createElement("button", {
          className: "remove",
          onClick: function onClick() {
            return fields.pop();
          }
        }, "Remove Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component30) {
        _inheritsLoose(Form, _Component30);

        function Form() {
          return _Component30.apply(this, arguments) || this;
        }

        var _proto30 = Form.prototype;

        _proto30.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var addButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'add');

      var removeButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'remove'); // length is 0


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(addButton); // field array rerendered, length is 1


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // add field

      _testUtils.default.Simulate.click(addButton); // field array rerendered, length is 2


      expect(renderFieldArray).toHaveBeenCalledTimes(3);
      expect(renderFieldArray.mock.calls[2][0].fields.length).toBe(2); // add field

      _testUtils.default.Simulate.click(addButton); // field array rerendered, length is 3


      expect(renderFieldArray).toHaveBeenCalledTimes(4);
      expect(renderFieldArray.mock.calls[3][0].fields.length).toBe(3); // remove field

      _testUtils.default.Simulate.click(removeButton); // field array rerendered, length is 2


      expect(renderFieldArray).toHaveBeenCalledTimes(5);
      expect(renderFieldArray.mock.calls[4][0].fields.length).toBe(2); // add field

      _testUtils.default.Simulate.click(addButton); // field array rerendered, length is 3


      expect(renderFieldArray).toHaveBeenCalledTimes(6);
      expect(renderFieldArray.mock.calls[5][0].fields.length).toBe(3);
    });
    it('should rerender when items swapped', function () {
      var store = makeStore({
        testForm: {
          values: {
            items: ['dog', 'cat']
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref13) {
        var fields = _ref13.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          className: "swap",
          onClick: function onClick() {
            return fields.swap(0, 1);
          }
        }, "Swap items"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component31) {
        _inheritsLoose(Form, _Component31);

        function Form() {
          return _Component31.apply(this, arguments) || this;
        }

        var _proto31 = Form.prototype;

        _proto31.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "items",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var swapButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'swap'); // length is 0


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(2);
      expect(renderField.mock.calls[0][0].input.value).toBe('dog');
      expect(renderField.mock.calls[1][0].input.value).toBe('cat');
      expect(renderFieldArray.mock.calls[0][0].fields.get(0)).toBe('dog');
      expect(renderFieldArray.mock.calls[0][0].fields.get(1)).toBe('cat'); // add field

      _testUtils.default.Simulate.click(swapButton); // field array rerendered, items swapped


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(2);
      expect(renderField.mock.calls[2][0].input.value).toBe('cat');
      expect(renderField.mock.calls[3][0].input.value).toBe('dog');
      expect(renderFieldArray.mock.calls[1][0].fields.get(0)).toBe('cat');
      expect(renderFieldArray.mock.calls[1][0].fields.get(1)).toBe('dog');
    });
    it('should rerender when array sync error appears or disappears', function () {
      if (allowsArrayErrors) {
        var store = makeStore({
          testForm: {
            values: {
              dogs: []
            }
          }
        });
        var renderFieldArray = jest.fn(function (_ref14) {
          var fields = _ref14.fields;
          return _react.default.createElement("div", null, fields.map(function (field, index) {
            return _react.default.createElement("div", {
              key: index
            }, field);
          }), _react.default.createElement("button", {
            className: "add",
            onClick: function onClick() {
              return fields.push();
            }
          }, "Add Dog"), _react.default.createElement("button", {
            className: "remove",
            onClick: function onClick() {
              return fields.pop();
            }
          }, "Remove Dog"));
        });

        var Form =
        /*#__PURE__*/
        function (_Component32) {
          _inheritsLoose(Form, _Component32);

          function Form() {
            return _Component32.apply(this, arguments) || this;
          }

          var _proto32 = Form.prototype;

          _proto32.render = function render() {
            return _react.default.createElement(FieldArray, {
              name: "dogs",
              component: renderFieldArray
            });
          };

          return Form;
        }(_react.Component);

        var TestForm = reduxForm({
          form: 'testForm',
          validate: function validate(values) {
            var dogs = getIn(values, 'dogs');
            var errors = {
              dogs: []
            };

            if (dogs && size(dogs) === 0) {
              errors.dogs._error = 'No dogs';
            }

            if (dogs && size(dogs) > 1) {
              errors.dogs._error = 'Too many';
            }

            return errors;
          }
        })(Form);

        var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));

        var addButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'add');

        var removeButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'remove'); // length is 0, ERROR!


        expect(renderFieldArray).toHaveBeenCalled();
        expect(renderFieldArray).toHaveBeenCalledTimes(2);
        expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(0);
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBeTruthy();
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBe('No dogs');
        renderFieldArray.mockClear();

        _testUtils.default.Simulate.click(addButton); // length goes to 1, no error yet


        expect(renderFieldArray).toHaveBeenCalledTimes(1);
        expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(1);
        expect(renderFieldArray.mock.calls[0][0].meta.error).toBeFalsy();
        renderFieldArray.mockClear();

        _testUtils.default.Simulate.click(addButton); // length goes to 2, ERROR!


        expect(renderFieldArray).toHaveBeenCalledTimes(2);
        expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(2);
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBeTruthy();
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBe('Too many');
        renderFieldArray.mockClear();

        _testUtils.default.Simulate.click(removeButton); // length goes to 1, ERROR disappears!


        expect(renderFieldArray).toHaveBeenCalledTimes(2);
        expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1);
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBeFalsy();
        renderFieldArray.mockClear();

        _testUtils.default.Simulate.click(removeButton); // length goes to 0, ERROR!


        expect(renderFieldArray).toHaveBeenCalledTimes(2);
        expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(0);
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBeTruthy();
        expect(renderFieldArray.mock.calls[1][0].meta.error).toBe('No dogs');
      }
    });
    it('should rerender when array sync warning appears or disappears', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: []
          }
        }
      });
      var renderFieldArray = jest.fn(function (_ref15) {
        var fields = _ref15.fields;
        return _react.default.createElement("div", null, fields.map(function (field, index) {
          return _react.default.createElement("div", {
            key: index
          }, field);
        }), _react.default.createElement("button", {
          className: "add",
          onClick: function onClick() {
            return fields.push();
          }
        }, "Add Dog"), _react.default.createElement("button", {
          className: "remove",
          onClick: function onClick() {
            return fields.pop();
          }
        }, "Remove Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component33) {
        _inheritsLoose(Form, _Component33);

        function Form() {
          return _Component33.apply(this, arguments) || this;
        }

        var _proto33 = Form.prototype;

        _proto33.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: function warn(values) {
          var dogs = getIn(values, 'dogs');
          var warnings = {
            dogs: []
          };

          if (dogs && size(dogs) === 0) {
            warnings.dogs._warning = 'No dogs';
          }

          if (dogs && size(dogs) > 1) {
            warnings.dogs._warning = 'Too many';
          }

          return warnings;
        }
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var addButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'add');

      var removeButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'remove'); // length is 0, ERROR!


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(0);
      expect(renderFieldArray.mock.calls[1][0].meta.warning).toBeTruthy();
      expect(renderFieldArray.mock.calls[1][0].meta.warning).toBe('No dogs');

      _testUtils.default.Simulate.click(addButton); // length goes to 1, no warning yet


      expect(renderFieldArray).toHaveBeenCalledTimes(3);
      expect(renderFieldArray.mock.calls[2][0].fields.length).toBe(1);
      expect(renderFieldArray.mock.calls[2][0].meta.warning).toBeFalsy();

      _testUtils.default.Simulate.click(addButton); // length goes to 2, ERROR!


      expect(renderFieldArray).toHaveBeenCalledTimes(5);
      expect(renderFieldArray.mock.calls[4][0].fields.length).toBe(2);
      expect(renderFieldArray.mock.calls[4][0].meta.warning).toBeTruthy();
      expect(renderFieldArray.mock.calls[4][0].meta.warning).toBe('Too many');

      _testUtils.default.Simulate.click(removeButton); // length goes to 1, ERROR disappears!


      expect(renderFieldArray).toHaveBeenCalledTimes(7);
      expect(renderFieldArray.mock.calls[6][0].fields.length).toBe(1);
      expect(renderFieldArray.mock.calls[6][0].meta.warning).toBeFalsy();

      _testUtils.default.Simulate.click(removeButton); // length goes to 0, ERROR!


      expect(renderFieldArray).toHaveBeenCalledTimes(9);
      expect(renderFieldArray.mock.calls[8][0].fields.length).toBe(0);
      expect(renderFieldArray.mock.calls[8][0].meta.warning).toBeTruthy();
      expect(renderFieldArray.mock.calls[8][0].meta.warning).toBe('No dogs');
    });
    it('should rerender when depending value has updated', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: [{
              name: 'Fido',
              hasCollar: false
            }, {
              name: 'Snoopy',
              hasCollar: false
            }]
          }
        }
      });
      var renderFieldArray = jest.fn(function (_ref16) {
        var fields = _ref16.fields;
        return _react.default.createElement("div", null, fields.map(function (field, index) {
          return _react.default.createElement("div", {
            key: index
          }, getIn(fields.get(index), 'hasCollar') && _react.default.createElement("span", {
            className: "collar"
          }), _react.default.createElement(Field, {
            name: field + ".hasCollar",
            component: "input",
            type: "checkbox"
          }), _react.default.createElement(Field, {
            name: field + ".name",
            component: "input"
          }));
        }), _react.default.createElement("button", {
          className: "add",
          onClick: function onClick() {
            return fields.push();
          }
        }, "Add Dog"), _react.default.createElement("button", {
          className: "remove",
          onClick: function onClick() {
            return fields.pop();
          }
        }, "Remove Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component34) {
        _inheritsLoose(Form, _Component34);

        function Form() {
          return _Component34.apply(this, arguments) || this;
        }

        var _proto34 = Form.prototype;

        _proto34.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        pure: false,
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var checkbox = _testUtils.default.scryRenderedDOMComponentsWithTag(dom, 'input').find(function (element) {
        return element.getAttribute('name') === 'dogs[0].hasCollar';
      });

      _testUtils.default.Simulate.change(checkbox, {
        target: {
          value: true
        }
      });

      expect(_testUtils.default.scryRenderedDOMComponentsWithClass(dom, 'collar').length).toBe(1);

      _testUtils.default.Simulate.change(checkbox, {
        target: {
          value: false
        }
      });

      expect(_testUtils.default.scryRenderedDOMComponentsWithClass(dom, 'collar').length).toBe(0);
    });
    it('should NOT rerender when a value changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: ['Fido', 'Snoopy']
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref17) {
        var fields = _ref17.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component35) {
        _inheritsLoose(Form, _Component35);

        function Form() {
          return _Component35.apply(this, arguments) || this;
        }

        var _proto35 = Form.prototype;

        _proto35.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // field array rendered


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1); // both fields rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(2);
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // change first field

      renderField.mock.calls[0][0].input.onChange('Odie'); // first field rerendered, second field is NOT

      expect(renderField).toHaveBeenCalledTimes(3);
      expect(renderField.mock.calls[2][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[2][0].input.value).toBe('Odie'); // field array NOT rerendered

      expect(renderFieldArray).toHaveBeenCalledTimes(1);
    });
    it('should rerender when a value changes if rerenderOnEveryChange is set', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: ['Fido', 'Snoopy']
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref18) {
        var fields = _ref18.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component36) {
        _inheritsLoose(Form, _Component36);

        function Form() {
          return _Component36.apply(this, arguments) || this;
        }

        var _proto36 = Form.prototype;

        _proto36.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray,
            rerenderOnEveryChange: true
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // field array rendered


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1); // both fields rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(2);
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // change first field

      renderField.mock.calls[0][0].input.onChange('Odie'); // first field rerendered, second field is NOT

      expect(renderField).toHaveBeenCalledTimes(3);
      expect(renderField.mock.calls[2][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[2][0].input.value).toBe('Odie'); // field array rerendered

      expect(renderFieldArray).toHaveBeenCalledTimes(2);
    });
    it('should rerender when a value changes if rerenderOnEveryChange is set and FieldArray has multiple groups with same values', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: [{
              name: 'Fido',
              owner: 'Alex'
            }, {
              name: 'Odie',
              owner: 'Alex'
            }, {
              name: 'Fido',
              owner: 'Alex'
            }, {
              name: 'Snoopy',
              owner: 'Alex'
            }]
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref19) {
        var fields = _ref19.fields;
        return _react.default.createElement("div", null, fields.map(function (member) {
          return _react.default.createElement("div", {
            key: member
          }, _react.default.createElement(Field, {
            name: member + ".name",
            component: renderField
          }), _react.default.createElement(Field, {
            name: member + ".owner",
            component: renderField
          }));
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component37) {
        _inheritsLoose(Form, _Component37);

        function Form() {
          return _Component37.apply(this, arguments) || this;
        }

        var _proto37 = Form.prototype;

        _proto37.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray,
            rerenderOnEveryChange: true
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // field array rendered


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1); // both fields rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(8);
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // change first name field

      renderField.mock.calls[0][0].input.onChange('Odie'); // first name field rerendered, other fields is NOT

      expect(renderField).toHaveBeenCalledTimes(9);
      expect(renderField.mock.calls[8][0].input.name).toBe('dogs[0].name');
      expect(renderField.mock.calls[8][0].input.value).toBe('Odie'); // field array rerendered

      expect(renderFieldArray).toHaveBeenCalledTimes(2);
    });
    it('should create a list in the store on push(undefined)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref20) {
        var fields = _ref20.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.push();
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component38) {
        _inheritsLoose(Form, _Component38);

        function Form() {
          return _Component38.apply(this, arguments) || this;
        }

        var _proto38 = Form.prototype;

        _proto38.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe(''); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: [undefined]
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should create a list in the store on push(value)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref21) {
        var fields = _ref21.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.push('Fido');
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component39) {
        _inheritsLoose(Form, _Component39);

        function Form() {
          return _Component39.apply(this, arguments) || this;
        }

        var _proto39 = Form.prototype;

        _proto39.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: ['Fido']
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should create a list in the store on unshift(undefined)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref22) {
        var fields = _ref22.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.unshift();
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component40) {
        _inheritsLoose(Form, _Component40);

        function Form() {
          return _Component40.apply(this, arguments) || this;
        }

        var _proto40 = Form.prototype;

        _proto40.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe(''); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: [undefined]
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should create a list in the store on unshift(value)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref23) {
        var fields = _ref23.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.unshift('Fido');
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component41) {
        _inheritsLoose(Form, _Component41);

        function Form() {
          return _Component41.apply(this, arguments) || this;
        }

        var _proto41 = Form.prototype;

        _proto41.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: ['Fido']
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should create a list in the store on insert(undefined)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref24) {
        var fields = _ref24.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.insert(0);
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component42) {
        _inheritsLoose(Form, _Component42);

        function Form() {
          return _Component42.apply(this, arguments) || this;
        }

        var _proto42 = Form.prototype;

        _proto42.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe(''); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: [undefined]
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should create a list in the store on insert(value)', function () {
      var store = makeStore({});
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref25) {
        var fields = _ref25.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          onClick: function onClick() {
            return fields.insert(0, 'Fido');
          }
        }, "Add Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component43) {
        _inheritsLoose(Form, _Component43);

        function Form() {
          return _Component43.apply(this, arguments) || this;
        }

        var _proto43 = Form.prototype;

        _proto43.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button'); // only registered field array in store


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              }
            }
          }
        }
      }); // length is 0

      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(0); // add field

      _testUtils.default.Simulate.click(button); // field array rerendered


      expect(renderFieldArray).toHaveBeenCalledTimes(2);
      expect(renderFieldArray.mock.calls[1][0].fields.length).toBe(1); // field rendered

      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(1);
      expect(renderField.mock.calls[0][0].input.name).toBe('dogs[0]');
      expect(renderField.mock.calls[0][0].input.value).toBe('Fido'); // field registered in store

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              dogs: ['Fido']
            },
            registeredFields: {
              dogs: {
                name: 'dogs',
                type: 'FieldArray',
                count: 1
              },
              'dogs[0]': {
                name: 'dogs[0]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // values list is a list

      expect(getIn(store.getState(), 'form.testForm.values.dogs')).toBeAList();
    });
    it('should work with Fields', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['firstValue', 'secondValue']
          }
        }
      });
      var renderField = jest.fn(function (field) {
        return _react.default.createElement("input", field.input);
      });
      var renderFields = jest.fn(function (_ref26) {
        var foo = _ref26.foo;
        return _react.default.createElement("div", null, foo.map(renderField));
      });
      var component = jest.fn(function (_ref27) {
        var fields = _ref27.fields;
        return _react.default.createElement("div", null, _react.default.createElement(Fields, {
          names: fields,
          component: renderFields
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component44) {
        _inheritsLoose(Form, _Component44);

        function Form() {
          return _Component44.apply(this, arguments) || this;
        }

        var _proto44 = Form.prototype;

        _proto44.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(FieldArray, {
            name: "foo",
            component: component
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderFields).toHaveBeenCalled();
      expect(renderFields).toHaveBeenCalledTimes(1);
      expect(renderFields.mock.calls[0][0].foo.length).toBe(2);
      expect(renderField).toHaveBeenCalled();
      expect(renderField).toHaveBeenCalledTimes(2);
      expect(renderField.mock.calls[0][0].input.value).toBe('firstValue');
      expect(renderField.mock.calls[1][0].input.value).toBe('secondValue');
    });
    it('should get() actual current value from redux store', function () {
      var store = makeStore({
        testForm: {
          values: {
            dogs: ['Fido', 'Snoopy']
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref28) {
        var fields = _ref28.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }));
      });

      var Form =
      /*#__PURE__*/
      function (_Component45) {
        _inheritsLoose(Form, _Component45);

        function Form() {
          return _Component45.apply(this, arguments) || this;
        }

        var _proto45 = Form.prototype;

        _proto45.render = function render() {
          return _react.default.createElement(FieldArray, {
            name: "dogs",
            component: renderFieldArray
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // field array rendered


      expect(renderFieldArray).toHaveBeenCalled();
      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(2);
      expect(renderFieldArray.mock.calls[0][0].fields.get(0)).toBe('Fido'); // change first field

      renderField.mock.calls[0][0].input.onChange('Odie'); // field array NOT rerendered

      expect(renderFieldArray).toHaveBeenCalledTimes(1);
      expect(renderFieldArray.mock.calls[0][0].fields.length).toBe(2); // but get() should get the new value

      expect(renderFieldArray.mock.calls[0][0].fields.get(0)).toBe('Odie');
    });
  });
};

describeFieldArray('FieldArray.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations2.default);
});
describeFieldArray('FieldArray.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations.default);
});