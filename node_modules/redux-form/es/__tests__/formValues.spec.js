"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _formValues = _interopRequireDefault(require("../formValues"));

var _formValues2 = _interopRequireDefault(require("../immutable/formValues"));

var _FormSection = _interopRequireDefault(require("../FormSection"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint react/no-multi-comp:0 */
var describeValues = function describeValues(name, formValues, structure, combineReducers, setup) {
  var reducer = (0, _createReducer.default)(structure);
  var reduxForm = (0, _createReduxForm.default)(structure);
  var fromJS = structure.fromJS;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  var store = makeStore();
  var Form = reduxForm({
    form: 'test',
    initialValues: fromJS({
      cat: 'rat',
      sub: {
        dog: 'cat'
      },
      arr: [{
        rat: 'cat'
      }, {
        rat: 'dog'
      }],
      spider: 'mosquito'
    })
  })(function (props) {
    return _react.default.createElement("div", props);
  });

  var testProps = function testProps(useSection) {
    var Spy = jest.fn(function () {
      return _react.default.createElement("div", null);
    });

    for (var _len = arguments.length, config = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      config[_key - 1] = arguments[_key];
    }

    var Decorated = formValues.apply(void 0, config)(Spy);

    _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(Form, null, useSection ? _react.default.createElement(_FormSection.default, {
      name: "sub"
    }, _react.default.createElement(Decorated, null)) : _react.default.createElement(Decorated, {
      fooFormFieldName: "cat",
      barFormFieldName: "sub.dog"
    }))));

    expect(Spy).toHaveBeenCalled();
    return Spy.mock.calls[0][0];
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should throw on missing names', function () {
      expect(function () {
        return testProps(false);
      }).toThrow();
      expect(function () {
        return testProps(false, {});
      }).toThrow();
      expect(function () {
        return testProps(false, function () {});
      }).toThrow();
      expect(function () {
        return testProps(false, function () {
          return {};
        });
      }).toThrow();
    });
    it('should throw on missing context', function () {
      var Spy = jest.fn(function () {
        return _react.default.createElement("div", null);
      });
      var Decorated = formValues('meep')(Spy);
      expect(function () {
        return _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(Decorated, null)));
      }).toThrow();
    });
    it('should get values from Redux state', function () {
      var props = testProps(false, 'cat', 'sub.dog');
      expect(props.cat).toEqual('rat');
      expect(props['sub.dog']).toEqual('cat');
    });
    it('should use given prop names', function () {
      var props = testProps(false, {
        foo: 'cat',
        bar: 'sub.dog'
      });
      expect(props.foo).toEqual('rat');
      expect(props.bar).toEqual('cat');
    });
    it('should get values from Redux state when using a value mapper function', function () {
      var props = testProps(false, function (props) {
        return props.fooFormFieldName;
      });
      expect(props.cat).toEqual('rat');
    });
    it('should use given prop names when using a value mapper function', function () {
      var props = testProps(false, function (props) {
        return {
          foo: props.fooFormFieldName,
          bar: props.barFormFieldName
        };
      });
      expect(props.foo).toEqual('rat');
      expect(props.bar).toEqual('cat');
    });
    it('should work in FormSection', function () {
      var props = testProps(true, 'dog');
      expect(props.dog).toEqual('cat');
    });
    it('should update props when FormSection name changes', function () {
      var node = document.createElement('div');
      var Spy = jest.fn(function () {
        return _react.default.createElement("div", null);
      });
      var Decorated = formValues('rat')(Spy);

      var Component = function Component(_ref) {
        var name = _ref.name;
        return _react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(Form, null, _react.default.createElement(_FormSection.default, {
          name: name
        }, _react.default.createElement(Decorated, null))));
      };

      _reactDom.default.hydrate(_react.default.createElement(Component, {
        name: "arr[0]"
      }), node);

      _reactDom.default.hydrate(_react.default.createElement(Component, {
        name: "arr[1]"
      }), node);

      expect(Spy.mock.calls.length).toEqual(2);
      expect(Spy.mock.calls[0][0].rat).toEqual('cat');
      expect(Spy.mock.calls[1][0].rat).toEqual('dog');
    });
    it('should update formValues props when props change', function () {
      var node = document.createElement('div');
      var Spy = jest.fn(function () {
        return _react.default.createElement("div", null);
      });
      var Decorated = formValues(function (_ref2) {
        var pet = _ref2.pet;
        return {
          food: pet
        };
      })(Spy);

      var Component = function Component(_ref3) {
        var pet = _ref3.pet;
        return _react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(Form, null, _react.default.createElement(Decorated, {
          pet: pet
        })));
      };

      _reactDom.default.hydrate(_react.default.createElement(Component, {
        pet: "cat"
      }), node);

      _reactDom.default.hydrate(_react.default.createElement(Component, {
        pet: "spider"
      }), node);

      expect(Spy.mock.calls.length).toEqual(2);
      expect(Spy.mock.calls[0][0].food).toEqual('rat');
      expect(Spy.mock.calls[1][0].food).toEqual('mosquito');
    });
  });
};

describeValues('formValues.plain', _formValues.default, _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeValues('formValues.immutable', _formValues2.default, _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});