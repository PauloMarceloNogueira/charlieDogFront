"use strict";

exports.__esModule = true;
exports.default = void 0;

var _actions = _interopRequireDefault(require("../../actions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var touch = _actions.default.touch;

var describeTouch = function describeTouch(reducer, expect, _ref) {
  var fromJS = _ref.fromJS;
  return function () {
    it('should mark fields as touched on touch', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), touch('foo', 'myField', 'myOtherField'));
      expect(state).toEqualMap({
        foo: {
          anyTouched: true,
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          },
          fields: {
            myField: {
              touched: true
            },
            myOtherField: {
              touched: true
            }
          }
        }
      });
    });
    it('should mark deep fields as touched on touch', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            deep: {
              myField: 'value',
              myOtherField: 'otherValue'
            }
          }
        }
      }), touch('foo', 'deep.myField', 'deep.myOtherField'));
      expect(state).toEqualMap({
        foo: {
          anyTouched: true,
          values: {
            deep: {
              myField: 'value',
              myOtherField: 'otherValue'
            }
          },
          fields: {
            deep: {
              myField: {
                touched: true
              },
              myOtherField: {
                touched: true
              }
            }
          }
        }
      });
    });
    it('should mark array fields as touched on touch', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            myFields: ['value', 'otherValue']
          }
        }
      }), touch('foo', 'myFields[0]', 'myFields[1]'));
      expect(state).toEqualMap({
        foo: {
          anyTouched: true,
          values: {
            myFields: ['value', 'otherValue']
          },
          fields: {
            myFields: [{
              touched: true
            }, {
              touched: true
            }]
          }
        }
      });
    });
  };
};

var _default = describeTouch;
exports.default = _default;