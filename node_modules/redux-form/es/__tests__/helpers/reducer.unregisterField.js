"use strict";

exports.__esModule = true;
exports.default = void 0;

var _actions = _interopRequireDefault(require("../../actions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unregisterField = _actions.default.unregisterField;

var describeUnregisterField = function describeUnregisterField(reducer, expect, _ref) {
  var fromJS = _ref.fromJS,
      setIn = _ref.setIn;
  return function () {
    it('should remove a field from registeredFields', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should remove sync errors', function () {
      expect(reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncErrors', {
        bar: 'Your bar needs more beer'
      }), unregisterField('foo', 'bar'))).toEqualMap({
        foo: {}
      });
      expect(reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            },
            another: {
              name: 'another',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncErrors', {
        bar: 'Your bar needs more beer',
        another: 'Another error'
      }), unregisterField('foo', 'bar'))).toEqualMap(setIn(fromJS({
        foo: {
          registeredFields: {
            another: {
              name: 'another',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncErrors', {
        another: 'Another error'
      }));
    });
    it('should remove deep sync errors', function () {
      var state = reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            'bar.deep.property': {
              name: 'bar.deep.property',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncErrors', {
        bar: {
          deep: {
            property: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar.deep.property'));
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should remove deep sync warnings', function () {
      var state = reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            'bar.deep.property': {
              name: 'bar.deep.property',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncWarnings', {
        bar: {
          deep: {
            property: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar.deep.property'));
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should not remove sync errors if the field is registered multiple times', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 2
            }
          },
          syncErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          syncErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      });
    });
    it('should remove submit errors', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          submitErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should not remove submit errors if the field is registered multiple times', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 2
            }
          },
          submitErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          submitErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      });
    });
    it('should remove async errors', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          asyncErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should not remove async errors if the field is registered multiple times', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 2
            }
          },
          asyncErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          asyncErrors: {
            bar: 'Your bar needs more beer'
          }
        }
      });
    });
    it('should remove sync warnings', function () {
      expect(reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncWarnings', {
        bar: 'Your bar needs more beer'
      }), unregisterField('foo', 'bar'))).toEqualMap({
        foo: {}
      });
      expect(reducer(setIn(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            },
            another: {
              name: 'another',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncWarnings', {
        bar: 'Your bar needs more beer',
        another: 'Another warning'
      }), unregisterField('foo', 'bar'))).toEqualMap(setIn(fromJS({
        foo: {
          registeredFields: {
            another: {
              name: 'another',
              type: 'field',
              count: 1
            }
          }
        }
      }), 'foo.syncWarnings', {
        another: 'Another warning'
      }));
    });
    it('should not remove sync warnings if the field is registered multiple times', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 2
            }
          },
          syncWarnings: {
            bar: 'Your bar needs more beer'
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          },
          syncWarnings: {
            bar: 'Your bar needs more beer'
          }
        }
      });
    });
    it('should do nothing if there are no registered fields', function () {
      var initialState = fromJS({
        foo: {}
      });
      var state = reducer(initialState, unregisterField('foo', 'bar'));
      expect(state).toEqual(initialState);
    });
    it('should do nothing if the field is not registered', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'Field',
              count: 1
            }
          }
        }
      }), unregisterField('foo', 'baz'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'Field',
              count: 1
            }
          }
        }
      });
    });
    it('should set count to zero when not destroyOnUnmount', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 1
            }
          }
        }
      }), unregisterField('foo', 'bar', false));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 0
            }
          }
        }
      });
    });
    it('should decrease count if the field is registered multiple times', function () {
      var state = reducer(fromJS({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 8
            }
          }
        }
      }), unregisterField('foo', 'bar'));
      expect(state).toEqualMap({
        foo: {
          registeredFields: {
            bar: {
              name: 'bar',
              type: 'field',
              count: 7
            }
          }
        }
      });
    });
  };
};

var _default = describeUnregisterField;
exports.default = _default;