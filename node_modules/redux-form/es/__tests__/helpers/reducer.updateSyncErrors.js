"use strict";

exports.__esModule = true;
exports.default = void 0;

var _actions = _interopRequireDefault(require("../../actions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var updateSyncErrors = _actions.default.updateSyncErrors;

var describeUpdateSyncErrors = function describeUpdateSyncErrors(reducer, expect, _ref) {
  var fromJS = _ref.fromJS,
      setIn = _ref.setIn;
  return function () {
    it('should update sync errors', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), updateSyncErrors('foo', {
        myField: 'myField error',
        myOtherField: 'myOtherField error'
      }));
      expect(state).toEqual(setIn(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), 'foo.syncErrors', {
        myField: 'myField error',
        myOtherField: 'myOtherField error'
      }));
    });
    it('should update form-wide error', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), updateSyncErrors('foo', {
        myField: 'myField error'
      }, 'form wide error'));
      expect(state).toEqualMap(setIn(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          },
          syncError: true,
          error: 'form wide error'
        }
      }), 'foo.syncErrors', {
        myField: 'myField error'
      }));
    });
    it('should update complex sync errors', function () {
      var state = reducer(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), updateSyncErrors('foo', {
        myField: {
          complex: true,
          text: 'myField error'
        },
        myOtherField: {
          complex: true,
          text: 'myOtherField error'
        }
      }));
      expect(state).toEqual(setIn(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), 'foo.syncErrors', {
        myField: {
          complex: true,
          text: 'myField error'
        },
        myOtherField: {
          complex: true,
          text: 'myOtherField error'
        }
      }));
    });
    it('should clear sync errors', function () {
      var state = reducer(setIn(fromJS({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      }), 'foo.syncErrors', {
        myField: 'myField error',
        myOtherField: 'myOtherField error'
      }), updateSyncErrors('foo', {}));
      expect(state).toEqualMap({
        foo: {
          values: {
            myField: 'value',
            myOtherField: 'otherValue'
          }
        }
      });
    });
  };
};

var _default = describeUpdateSyncErrors;
exports.default = _default;