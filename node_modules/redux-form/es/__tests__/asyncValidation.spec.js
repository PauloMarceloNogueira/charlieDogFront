"use strict";

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isPromise = _interopRequireDefault(require("is-promise"));

var _asyncValidation = _interopRequireDefault(require("../asyncValidation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('asyncValidation', function () {
  var field = 'myField';
  it('should throw an error if fn does not return a promise', function () {
    var fn = _noop2.default;
    var start = _noop2.default;
    var stop = _noop2.default;
    expect(function () {
      return (0, _asyncValidation.default)(fn, start, stop, field);
    }).toThrow(/promise/);
  });
  it('should return a promise', function () {
    var fn = function fn() {
      return Promise.resolve();
    };

    var start = _noop2.default;
    var stop = _noop2.default;
    expect((0, _isPromise.default)((0, _asyncValidation.default)(fn, start, stop, field))).toBe(true);
  });
  it('should call start, fn, and stop on promise resolve', function () {
    var fn = jest.fn().mockImplementation(function () {
      return Promise.resolve();
    });
    var start = jest.fn();
    var stop = jest.fn();
    var promise = (0, _asyncValidation.default)(fn, start, stop, field);
    expect(fn).toHaveBeenCalled();
    expect(start).toHaveBeenCalledWith(field);
    return promise.then(function () {
      expect(stop).toHaveBeenCalled();
    });
  });
  it('should throw when promise rejected with no errors', function () {
    var fn = jest.fn().mockImplementation(function () {
      return Promise.reject();
    });
    var start = jest.fn();
    var stop = jest.fn();
    var promise = (0, _asyncValidation.default)(fn, start, stop, field);
    expect(fn).toHaveBeenCalled();
    expect(start).toHaveBeenCalledWith(field);
    return promise.catch(function () {
      expect(stop).toHaveBeenCalled();
    });
  });
  it('should call start, fn, and stop on promise reject', function () {
    var errors = {
      foo: 'error'
    };
    var fn = jest.fn().mockImplementation(function () {
      return Promise.reject(errors);
    });
    var start = jest.fn();
    var stop = jest.fn();
    var promise = (0, _asyncValidation.default)(fn, start, stop, field);
    expect(fn).toHaveBeenCalled();
    expect(start).toHaveBeenCalledWith(field);
    return promise.catch(function () {
      expect(stop).toHaveBeenCalledWith(errors);
    });
  });
});