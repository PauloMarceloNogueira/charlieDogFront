"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createFields = _interopRequireDefault(require("../createFields"));

var _FormSection = _interopRequireDefault(require("../FormSection"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var describeFields = function describeFields(name, structure, combineReducers, setup) {
  var reduxForm = (0, _createReduxForm.default)(structure);
  var Fields = (0, _createFields.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  var TestInput =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(TestInput, _Component);

    function TestInput() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = TestInput.prototype;

    _proto.render = function render() {
      return _react.default.createElement("div", null, "TEST INPUT");
    };

    return TestInput;
  }(_react.Component);

  var testProps = function testProps(state, config) {
    if (config === void 0) {
      config = {};
    }

    var store = makeStore({
      testForm: state
    });

    var Form =
    /*#__PURE__*/
    function (_Component2) {
      _inheritsLoose(Form, _Component2);

      function Form() {
        return _Component2.apply(this, arguments) || this;
      }

      var _proto2 = Form.prototype;

      _proto2.render = function render() {
        return _react.default.createElement("div", null, _react.default.createElement(Fields, {
          names: ['foo'],
          component: TestInput
        }));
      };

      return Form;
    }(_react.Component);

    var TestForm = reduxForm(_extends({
      form: 'testForm'
    }, config))(Form);

    var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(TestForm, null)));

    return _testUtils.default.findRenderedComponentWithType(dom, TestInput).props;
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should throw an error if not in ReduxForm', function () {
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement("div", null, _react.default.createElement(Fields, {
          names: ['foo', 'bar'],
          component: TestInput
        })));
      }).toThrow(/must be inside a component decorated with reduxForm/);
    });
    it('should throw an error if invalid component prop is provided', function () {
      var store = makeStore();
      var notAComponent = {};

      var Form =
      /*#__PURE__*/
      function (_Component3) {
        _inheritsLoose(Form, _Component3);

        function Form() {
          return _Component3.apply(this, arguments) || this;
        }

        var _proto3 = Form.prototype;

        _proto3.render = function render() {
          return _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: notAComponent
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/Element type is invalid/);
    });
    it('should warn if no names prop is provided', function () {
      var spy = jest.spyOn(console, 'error'); // mutes prop type warning

      var store = makeStore();

      var Form =
      /*#__PURE__*/
      function (_Component4) {
        _inheritsLoose(Form, _Component4);

        function Form() {
          return _Component4.apply(this, arguments) || this;
        }

        var _proto4 = Form.prototype;

        _proto4.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            component: TestInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/No "names" prop was specified/);
      spy.mockReset();
    });
    it('should warn if invalid names prop is provided', function () {
      var spy = jest.spyOn(console, 'error'); // mutes prop type warning

      var store = makeStore();

      var Form =
      /*#__PURE__*/
      function (_Component5) {
        _inheritsLoose(Form, _Component5);

        function Form() {
          return _Component5.apply(this, arguments) || this;
        }

        var _proto5 = Form.prototype;

        _proto5.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: "This is a string",
            component: TestInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/Invalid prop "names"/);
      spy.mockReset();
    });
    it('should get value from Redux state', function () {
      var props = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props.foo.input.value).toBe('bar');
    });
    it('should get meta.form', function () {
      var props = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props.foo.meta.form).toBe('testForm');
    });
    it('should get initial value from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        }
      });
      expect(props.foo.meta.initial).toBe('bar');
    });
    it('should get dirty/pristine from Redux state', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        }
      });
      expect(props1.foo.meta.pristine).toBe(true);
      expect(props1.foo.meta.dirty).toBe(false);
      var props2 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        }
      });
      expect(props2.foo.meta.pristine).toBe(false);
      expect(props2.foo.meta.dirty).toBe(true);
    });
    it('should allow an empty value from Redux state to be pristine', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: ''
        }
      });
      expect(props1.foo.meta.pristine).toBe(false);
      expect(props1.foo.meta.dirty).toBe(true);
      var props2 = testProps({
        initial: {
          foo: ''
        },
        values: {
          foo: ''
        }
      });
      expect(props2.foo.meta.pristine).toBe(true);
      expect(props2.foo.meta.dirty).toBe(false);
    });
    it('should get asyncValidating from Redux state', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        asyncValidating: 'dog'
      });
      expect(props1.foo.meta.asyncValidating).toBe(false);
      var props2 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        },
        asyncValidating: 'foo'
      });
      expect(props2.foo.meta.asyncValidating).toBe(true);
    });
    it('should get sync errors from outer reduxForm component', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        }
      }, {
        validate: function validate() {
          return {
            foo: 'foo error'
          };
        }
      });
      expect(props.foo.meta.error).toBe('foo error');
    });
    it('should get sync warnings from outer reduxForm component', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        }
      }, {
        warn: function warn() {
          return {
            foo: 'foo warning'
          };
        }
      });
      expect(props.foo.meta.warning).toBe('foo warning');
    });
    it('should get async errors from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        asyncErrors: {
          foo: 'foo error'
        }
      });
      expect(props.foo.meta.error).toBe('foo error');
    });
    it('should get submit errors from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        submitErrors: {
          foo: 'foo error'
        }
      });
      expect(props.foo.meta.error).toBe('foo error');
    });
    it('should get submitFailed prop from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        submitFailed: true
      });
      expect(props.foo.meta.submitFailed).toBe(true);
    });
    it('should provide names getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component6) {
        _inheritsLoose(Form, _Component6);

        function Form() {
          return _Component6.apply(this, arguments) || this;
        }

        var _proto6 = Form.prototype;

        _proto6.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.names).toEqual(['foo', 'bar']);
    });
    it('should provide values getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'fooValue',
            bar: 'barValue'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component7) {
        _inheritsLoose(Form, _Component7);

        function Form() {
          return _Component7.apply(this, arguments) || this;
        }

        var _proto7 = Form.prototype;

        _proto7.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.values).toEqual({
        foo: 'fooValue',
        bar: 'barValue'
      });
    });
    it('should provide dirty getter that is true when any field is dirty', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: 'fooValue',
            bar: 'barValue'
          },
          values: {
            foo: 'fooValue',
            bar: 'barValueDirty'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component8) {
        _inheritsLoose(Form, _Component8);

        function Form() {
          return _Component8.apply(this, arguments) || this;
        }

        var _proto8 = Form.prototype;

        _proto8.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(true);
    });
    it('should provide dirty getter that is false when all fields are pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: 'fooValue',
            bar: 'barValue'
          },
          values: {
            foo: 'fooValue',
            bar: 'barValue'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component9) {
        _inheritsLoose(Form, _Component9);

        function Form() {
          return _Component9.apply(this, arguments) || this;
        }

        var _proto9 = Form.prototype;

        _proto9.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(false);
    });
    it('should provide pristine getter that is false when dirty', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component10) {
        _inheritsLoose(Form, _Component10);

        function Form() {
          return _Component10.apply(this, arguments) || this;
        }

        var _proto10 = Form.prototype;

        _proto10.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(false);
    });
    it('should provide pristine getter that is true when pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: 'bar'
          },
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component11) {
        _inheritsLoose(Form, _Component11);

        function Form() {
          return _Component11.apply(this, arguments) || this;
        }

        var _proto11 = Form.prototype;

        _proto11.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo'],
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(true);
    });
    it('should have value set to initial value on first render', function () {
      var store = makeStore({});
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.foo.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component12) {
        _inheritsLoose(Form, _Component12);

        function Form() {
          return _Component12.apply(this, arguments) || this;
        }

        var _proto12 = Form.prototype;

        _proto12.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, {
        initialValues: {
          foo: 'fooValue',
          bar: 'barValue'
        }
      })));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].foo.input.value).toBe('fooValue');
      expect(input.mock.calls[1][0].bar.input.value).toBe('barValue');
    });
    it('should provide sync error for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate() {
        return {
          foo: ['first error', 'second error']
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component13) {
        _inheritsLoose(Form, _Component13);

        function Form() {
          return _Component13.apply(this, arguments) || this;
        }

        var _proto13 = Form.prototype;

        _proto13.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo[0]', 'foo[1]'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].foo[0].meta.valid).toBe(false);
      expect(input.mock.calls[1][0].foo[0].meta.error).toBe('first error');
      expect(input.mock.calls[1][0].foo[1].meta.valid).toBe(false);
      expect(input.mock.calls[1][0].foo[1].meta.error).toBe('second error');
    });
    it('should provide sync error for array-of-objects field', function () {
      var store = makeStore({
        testForm: {
          values: {
            authors: [{
              firstName: 'Erik',
              lastName: 'Rasmussen'
            }]
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate() {
        return {
          authors: [{
            _error: 'Object Error'
          }]
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component14) {
        _inheritsLoose(Form, _Component14);

        function Form() {
          return _Component14.apply(this, arguments) || this;
        }

        var _proto14 = Form.prototype;

        _proto14.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['authors[0]'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].authors[0].meta.valid).toBe(false);
      expect(input.mock.calls[1][0].authors[0].meta.error).toBe('Object Error');
    });
    it('should provide sync warning for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn() {
        return {
          foo: ['first warning', 'second warning']
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component15) {
        _inheritsLoose(Form, _Component15);

        function Form() {
          return _Component15.apply(this, arguments) || this;
        }

        var _proto15 = Form.prototype;

        _proto15.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo[0]', 'foo[1]'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].foo[0].meta.warning).toBe('first warning');
      expect(input.mock.calls[1][0].foo[1].meta.warning).toBe('second warning');
    });
    it('should provide sync warning for array-of-objects field', function () {
      var store = makeStore({
        testForm: {
          values: {
            authors: [{
              firstName: 'Erik',
              lastName: 'Rasmussen'
            }]
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn() {
        return {
          authors: [{
            _warning: 'Object Error'
          }]
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component16) {
        _inheritsLoose(Form, _Component16);

        function Form() {
          return _Component16.apply(this, arguments) || this;
        }

        var _proto16 = Form.prototype;

        _proto16.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['authors[0]'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].authors[0].meta.warning).toBe('Object Error');
    });
    it('should provide access to rendered component', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'fooValue',
            bar: 'barValue'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component17) {
        _inheritsLoose(Form, _Component17);

        function Form() {
          return _Component17.apply(this, arguments) || this;
        }

        var _proto17 = Form.prototype;

        _proto17.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: TestInput,
            forwardRef: true,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedComponentWithType(dom, TestInput);

      expect(ref.current.getRenderedComponent()).toBe(input);
    });
    it('should unregister fields when unmounted', function () {
      var store = makeStore();
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component18) {
        _inheritsLoose(Form, _Component18);

        function Form() {
          var _this;

          _this = _Component18.call(this) || this;
          _this.state = {
            toggle: false
          };
          return _this;
        }

        var _proto18 = Form.prototype;

        _proto18.render = function render() {
          var _this2 = this;

          var toggle = this.state.toggle;
          return _react.default.createElement("div", null, !toggle && _react.default.createElement(Fields, {
            names: ['dog', 'cat'],
            component: input
          }), toggle && _react.default.createElement(Fields, {
            names: ['cow', 'ewe'],
            component: input
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this2.setState({
                toggle: true
              });
            }
          }, "Toggle"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              dog: {
                name: 'dog',
                type: 'Field',
                count: 1
              },
              cat: {
                name: 'cat',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              cow: {
                name: 'cow',
                type: 'Field',
                count: 1
              },
              ewe: {
                name: 'ewe',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should reconnect when names change', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'fooValue',
            bar: 'barValue'
          },
          fields: {
            bar: {
              touched: true
            }
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component19) {
        _inheritsLoose(Form, _Component19);

        function Form() {
          var _this3;

          _this3 = _Component19.call(this) || this;
          _this3.state = {
            field: 'foo'
          };
          return _this3;
        }

        var _proto19 = Form.prototype;

        _proto19.render = function render() {
          var _this4 = this;

          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: [this.state.field],
            component: input
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this4.setState({
                field: 'bar'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].foo.input.value).toBe('fooValue');
      expect(input.mock.calls[0][0].foo.meta.touched).toBe(false);

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].bar.input.value).toBe('barValue');
      expect(input.mock.calls[1][0].bar.meta.touched).toBe(true);
    });
    it('should prefix name getter when inside FormSection', function () {
      var store = makeStore();

      var renderFields = function renderFields(_ref) {
        var foo = _ref.foo,
            bar = _ref.bar;
        return _react.default.createElement("div", null, _react.default.createElement("input", foo.input), _react.default.createElement("input", bar.input));
      };

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component20) {
        _inheritsLoose(Form, _Component20);

        function Form() {
          return _Component20.apply(this, arguments) || this;
        }

        var _proto20 = Form.prototype;

        _proto20.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: renderFields,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.names).toEqual(['foo.foo', 'foo.bar']);
    });
    it('should prefix name getter when inside multiple FormSection', function () {
      var store = makeStore();

      var renderFields = function renderFields(_ref2) {
        var foo = _ref2.foo,
            bar = _ref2.bar;
        return _react.default.createElement("div", null, _react.default.createElement("input", foo.input), _react.default.createElement("input", bar.input));
      };

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component21) {
        _inheritsLoose(Form, _Component21);

        function Form() {
          return _Component21.apply(this, arguments) || this;
        }

        var _proto21 = Form.prototype;

        _proto21.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: renderFields,
            ref: ref
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.names).toEqual(['foo.fighter.foo', 'foo.fighter.bar']);
    });
    it('should prefix name when inside FormSection', function () {
      var store = makeStore();

      var renderFields = function renderFields(_ref3) {
        var foo = _ref3.foo,
            bar = _ref3.bar;
        return _react.default.createElement("div", null, _react.default.createElement("input", foo.input), _react.default.createElement("input", bar.input));
      };

      var Form =
      /*#__PURE__*/
      function (_Component22) {
        _inheritsLoose(Form, _Component22);

        function Form() {
          return _Component22.apply(this, arguments) || this;
        }

        var _proto22 = Form.prototype;

        _proto22.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: renderFields
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.foo': {
                name: 'foo.foo',
                type: 'Field',
                count: 1
              },
              'foo.bar': {
                name: 'foo.bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should prefix name when inside multiple FormSections', function () {
      var store = makeStore();

      var renderFields = function renderFields(_ref4) {
        var foo = _ref4.foo,
            bar = _ref4.bar;
        return _react.default.createElement("div", null, _react.default.createElement("input", foo.input), _react.default.createElement("input", bar.input));
      };

      var Form =
      /*#__PURE__*/
      function (_Component23) {
        _inheritsLoose(Form, _Component23);

        function Form() {
          return _Component23.apply(this, arguments) || this;
        }

        var _proto23 = Form.prototype;

        _proto23.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(Fields, {
            names: ['foo', 'bar'],
            component: renderFields
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.fighter.foo': {
                name: 'foo.fighter.foo',
                type: 'Field',
                count: 1
              },
              'foo.fighter.bar': {
                name: 'foo.fighter.bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should rerender when props change', function () {
      var store = makeStore();
      var renderFields = jest.fn(function (props) {
        return _react.default.createElement("div", null, props.highlighted, _react.default.createElement("input", props.foo.input));
      });

      var Form =
      /*#__PURE__*/
      function (_Component24) {
        _inheritsLoose(Form, _Component24);

        function Form() {
          var _this5;

          _this5 = _Component24.call(this) || this;
          _this5.state = {
            highlighted: 0
          };
          return _this5;
        }

        var _proto24 = Form.prototype;

        _proto24.render = function render() {
          var _this6 = this;

          var highlighted = this.state.highlighted;
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo'],
            highlighted: highlighted,
            component: renderFields
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this6.setState({
                highlighted: highlighted + 1
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderFields).toHaveBeenCalled();
      expect(renderFields).toHaveBeenCalledTimes(1);
      expect(renderFields.mock.calls[0][0].highlighted).toBe(0);

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(renderFields).toHaveBeenCalledTimes(2);
      expect(renderFields.mock.calls[1][0].highlighted).toBe(1);
    });
    it('should NOT rerender when props.props is shallow-equal, but !==', function () {
      var store = makeStore();
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderSpy = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component25) {
        _inheritsLoose(Form, _Component25);

        function Form() {
          var _this7;

          _this7 = _Component25.call(this) || this;
          _this7.state = {
            foo: 'bar'
          };
          return _this7;
        }

        var _proto25 = Form.prototype;

        _proto25.render = function render() {
          var _this8 = this;

          renderSpy();
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['myField'],
            component: input,
            props: {
              rel: 'test'
            }
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this8.setState({
                foo: 'qux'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderSpy).toHaveBeenCalled();
      expect(renderSpy).toHaveBeenCalledTimes(1);
      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].rel).toBe('test');

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(renderSpy).toHaveBeenCalledTimes(2);
      expect(input).toHaveBeenCalledTimes(1);
    });
    it('should rerender when one of the fields changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            cat: 'catValue',
            dog: 'dogValue',
            ewe: 'eweValue',
            fox: 'foxValue'
          }
        }
      });
      var inputPair1 = jest.fn(function (_ref5) {
        var cat = _ref5.cat,
            dog = _ref5.dog;
        return _react.default.createElement("div", null, _react.default.createElement("input", cat.input), _react.default.createElement("input", dog.input));
      });
      var inputPair2 = jest.fn(function (_ref6) {
        var ewe = _ref6.ewe,
            fox = _ref6.fox;
        return _react.default.createElement("div", null, _react.default.createElement("input", ewe.input), _react.default.createElement("input", fox.input));
      });

      var Form =
      /*#__PURE__*/
      function (_Component26) {
        _inheritsLoose(Form, _Component26);

        function Form() {
          return _Component26.apply(this, arguments) || this;
        }

        var _proto26 = Form.prototype;

        _proto26.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['cat', 'dog'],
            component: inputPair1
          }), _react.default.createElement(Fields, {
            names: ['ewe', 'fox'],
            component: inputPair2
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(inputPair1).toHaveBeenCalled();
      expect(inputPair1).toHaveBeenCalledTimes(1);
      expect(inputPair1.mock.calls[0][0].cat.input.value).toBe('catValue');
      expect(inputPair1.mock.calls[0][0].dog.input.value).toBe('dogValue');
      expect(inputPair2).toHaveBeenCalled();
      expect(inputPair2).toHaveBeenCalledTimes(1);
      expect(inputPair2.mock.calls[0][0].ewe.input.value).toBe('eweValue');
      expect(inputPair2.mock.calls[0][0].fox.input.value).toBe('foxValue');
      inputPair1.mock.calls[0][0].dog.input.onChange('FIDO'); // input pair 1 should be rerendered

      expect(inputPair1).toHaveBeenCalledTimes(2);
      expect(inputPair1.mock.calls[1][0].cat.input.value).toBe('catValue');
      expect(inputPair1.mock.calls[1][0].dog.input.value).toBe('FIDO'); // input pair 2 should NOT be rerendered

      expect(inputPair2).toHaveBeenCalledTimes(1);
    });
    it('should call format function on first render', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'Redux Form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var format = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component27) {
        _inheritsLoose(Form, _Component27);

        function Form() {
          return _Component27.apply(this, arguments) || this;
        }

        var _proto27 = Form.prototype;

        _proto27.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['name'],
            component: input,
            format: format
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(1);
      expect(format.mock.calls[0]).toEqual(['Redux Form', 'name']);
      expect(input.mock.calls[0][0].name.input.value).toBe('redux form');
    });
    it('should call parse function on change', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component28) {
        _inheritsLoose(Form, _Component28);

        function Form() {
          return _Component28.apply(this, arguments) || this;
        }

        var _proto28 = Form.prototype;

        _proto28.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['name'],
            component: input,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(parse).not.toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].name.input.value).toBe('redux form');
      input.mock.calls[0][0].name.input.onChange('REDUX FORM ROCKS');
      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['REDUX FORM ROCKS', 'name']);
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].name.input.value).toBe('redux form rocks');
    });
    it('should call parse function on blur', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component29) {
        _inheritsLoose(Form, _Component29);

        function Form() {
          return _Component29.apply(this, arguments) || this;
        }

        var _proto29 = Form.prototype;

        _proto29.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['name'],
            component: input,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(parse).not.toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].name.input.value).toBe('redux form');
      input.mock.calls[0][0].name.input.onBlur('REDUX FORM ROCKS');
      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['REDUX FORM ROCKS', 'name']);
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].name.input.value).toBe('redux form rocks');
    });
    it('should handle on focus', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component30) {
        _inheritsLoose(Form, _Component30);

        function Form() {
          return _Component30.apply(this, arguments) || this;
        }

        var _proto30 = Form.prototype;

        _proto30.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['name'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].name.meta.visited).toBe(false);
      input.mock.calls[0][0].name.input.onFocus();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].name.meta.visited).toBe(true);
    });
    it('should parse and format to maintain different type in store', function () {
      var store = makeStore({
        testForm: {
          values: {
            age: 42
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value && parseInt(value, 10);
      });
      var format = jest.fn(function (value) {
        return value && value.toString();
      });

      var Form =
      /*#__PURE__*/
      function (_Component31) {
        _inheritsLoose(Form, _Component31);

        function Form() {
          return _Component31.apply(this, arguments) || this;
        }

        var _proto31 = Form.prototype;

        _proto31.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['age'],
            component: input,
            format: format,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // format called once


      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(1); // parse not called yet

      expect(parse).not.toHaveBeenCalled(); // input displaying string value

      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].age.input.value).toBe('42'); // update value

      input.mock.calls[0][0].age.input.onChange('15'); // parse was called

      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['15', 'age']); // value in store is number

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              age: 15 // number

            },
            registeredFields: {
              age: {
                name: 'age',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // format called again

      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(2);
      expect(format.mock.calls[1]).toEqual([15, 'age']); // input rerendered with string value

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].age.input.value).toBe('15');
    });
    it('should rerender when sync error changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            password: 'redux-form sucks',
            confirm: 'redux-form rocks'
          }
        }
      });
      var passwordInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var confirmInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate(values) {
        var password = getIn(values, 'password');
        var confirm = getIn(values, 'confirm');
        return password === confirm ? {} : {
          confirm: 'Must match!'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component32) {
        _inheritsLoose(Form, _Component32);

        function Form() {
          return _Component32.apply(this, arguments) || this;
        }

        var _proto32 = Form.prototype;

        _proto32.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['password'],
            component: passwordInput
          }), _react.default.createElement(Fields, {
            names: ['confirm'],
            component: confirmInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // password input rendered


      expect(passwordInput).toHaveBeenCalled();
      expect(passwordInput).toHaveBeenCalledTimes(1); // confirm input rendered with error

      expect(confirmInput).toHaveBeenCalled();
      expect(confirmInput).toHaveBeenCalledTimes(2);
      expect(confirmInput.mock.calls[1][0].confirm.meta.valid).toBe(false);
      expect(confirmInput.mock.calls[1][0].confirm.meta.error).toBe('Must match!'); // update password field so that they match

      passwordInput.mock.calls[0][0].password.input.onChange('redux-form rocks'); // password input rerendered

      expect(passwordInput).toHaveBeenCalledTimes(2); // confirm input should also rerender, but with no error

      expect(confirmInput).toHaveBeenCalledTimes(3);
      expect(confirmInput.mock.calls[2][0].confirm.meta.valid).toBe(true);
      expect(confirmInput.mock.calls[2][0].confirm.meta.error).toBe(undefined);
    });
    it('should rerender when sync error is cleared', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate(values) {
        var username = getIn(values, 'username');
        return username ? {} : {
          username: 'Required'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component33) {
        _inheritsLoose(Form, _Component33);

        function Form() {
          return _Component33.apply(this, arguments) || this;
        }

        var _proto33 = Form.prototype;

        _proto33.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['username'],
            component: usernameInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2); // username field has error

      expect(usernameInput.mock.calls[1][0].username.meta.valid).toBe(false);
      expect(usernameInput.mock.calls[1][0].username.meta.error).toBe('Required'); // update username field so it passes

      usernameInput.mock.calls[1][0].username.input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].username.meta.valid).toBe(true);
      expect(usernameInput.mock.calls[3][0].username.meta.error).toBe(undefined);
    });
    it('should rerender when sync warning changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            password: 'redux-form sucks',
            confirm: 'redux-form rocks'
          }
        }
      });
      var passwordInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var confirmInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn(values) {
        var password = getIn(values, 'password');
        var confirm = getIn(values, 'confirm');
        return password === confirm ? {} : {
          confirm: 'Should match. Or not. Whatever.'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component34) {
        _inheritsLoose(Form, _Component34);

        function Form() {
          return _Component34.apply(this, arguments) || this;
        }

        var _proto34 = Form.prototype;

        _proto34.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['password'],
            component: passwordInput
          }), _react.default.createElement(Fields, {
            names: ['confirm'],
            component: confirmInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // password input rendered


      expect(passwordInput).toHaveBeenCalled();
      expect(passwordInput).toHaveBeenCalledTimes(1); // confirm input rendered with warning

      expect(confirmInput).toHaveBeenCalled();
      expect(confirmInput).toHaveBeenCalledTimes(2);
      expect(confirmInput.mock.calls[1][0].confirm.meta.warning).toBe('Should match. Or not. Whatever.'); // update password field so that they match

      passwordInput.mock.calls[0][0].password.input.onChange('redux-form rocks'); // password input rerendered

      expect(passwordInput).toHaveBeenCalledTimes(2); // confirm input should also rerender, but with no warning

      expect(confirmInput).toHaveBeenCalledTimes(3);
      expect(confirmInput.mock.calls[2][0].confirm.meta.warning).toBe(undefined);
    });
    it('should rerender when sync warning is cleared', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn(values) {
        var username = getIn(values, 'username');
        return username ? {} : {
          username: 'Recommended'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component35) {
        _inheritsLoose(Form, _Component35);

        function Form() {
          return _Component35.apply(this, arguments) || this;
        }

        var _proto35 = Form.prototype;

        _proto35.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['username'],
            component: usernameInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2); // username field has warning

      expect(usernameInput.mock.calls[1][0].username.meta.warning).toBe('Recommended'); // update username field so it passes

      usernameInput.mock.calls[1][0].username.input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].username.meta.warning).toBe(undefined);
    });
    it('should provide correct prop structure', function () {
      var store = makeStore();
      var renderFields = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component36) {
        _inheritsLoose(Form, _Component36);

        function Form() {
          return _Component36.apply(this, arguments) || this;
        }

        var _proto36 = Form.prototype;

        _proto36.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: ['foo', 'bar', 'deep.dive', 'array[0]', 'array[1]'],
            component: renderFields,
            someCustomProp: "testing",
            anotherCustomProp: 42,
            customBooleanFlag: true
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderFields).toHaveBeenCalled();
      var fields = renderFields.mock.calls[0][0];

      var expectField = function expectField(field) {
        expect(field).toBeTruthy();
        expect(field.input).toBeTruthy();
        expect(typeof field.input.onChange).toBe('function');
        expect(typeof field.input.onBlur).toBe('function');
        expect(typeof field.input.onFocus).toBe('function');
        expect(field.meta).toBeTruthy();
        expect(field.meta.pristine).toBe(true);
        expect(field.meta.dirty).toBe(false);
        expect(field.someCustomProp).toBeFalsy();
        expect(field.anotherCustomProp).toBeFalsy();
        expect(field.customBooleanFlag).toBeFalsy();
      };

      expectField(fields.foo);
      expectField(fields.bar);
      expect(fields.deep).toBeTruthy();
      expectField(fields.deep.dive);
      expect(fields.array).toBeTruthy();
      expectField(fields.array[0]);
      expectField(fields.array[1]);
      expect(fields.someCustomProp).toBe('testing');
      expect(fields.anotherCustomProp).toBe(42);
      expect(fields.customBooleanFlag).toBe(true);
    });
    it('should provide correct prop structure after names change', function () {
      var store = makeStore();
      var renderFields = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component37) {
        _inheritsLoose(Form, _Component37);

        function Form(props) {
          var _this9;

          _this9 = _Component37.call(this, props) || this;
          _this9.state = {
            names: ['foo', 'bar', 'deep.dive', 'array[0]']
          };
          _this9.changeNames = _this9.changeNames.bind(_assertThisInitialized(_assertThisInitialized(_this9)));
          return _this9;
        }

        var _proto37 = Form.prototype;

        _proto37.changeNames = function changeNames() {
          this.setState({
            names: ['fighter', 'fly.high', 'array[1]']
          });
        };

        _proto37.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: this.state.names,
            component: renderFields,
            someCustomProp: "testing",
            anotherCustomProp: 42,
            customBooleanFlag: true
          }), _react.default.createElement("button", {
            type: "button",
            onClick: this.changeNames
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(renderFields).toHaveBeenCalled();
      expect(renderFields).toHaveBeenCalledTimes(2);
      var fields = renderFields.mock.calls[1][0];

      var expectField = function expectField(field) {
        expect(field).toBeTruthy();
        expect(field.input).toBeTruthy();
        expect(typeof field.input.onChange).toBe('function');
        expect(typeof field.input.onBlur).toBe('function');
        expect(typeof field.input.onFocus).toBe('function');
        expect(field.meta).toBeTruthy();
        expect(field.meta.pristine).toBe(true);
        expect(field.meta.dirty).toBe(false);
        expect(field.someCustomProp).toBeFalsy();
        expect(field.anotherCustomProp).toBeFalsy();
        expect(field.customBooleanFlag).toBeFalsy();
      };

      expectField(fields.fighter);
      expect(fields.fly).toBeTruthy();
      expectField(fields.fly.high);
      expect(fields.array).toBeTruthy();
      expectField(fields.array[1]);
      expect(fields.someCustomProp).toBe('testing');
      expect(fields.anotherCustomProp).toBe(42);
      expect(fields.customBooleanFlag).toBe(true);
      expect(fields.foo).toBeFalsy();
      expect(fields.bar).toBeFalsy();
      expect(fields.deep).toBeFalsy();
      expect(fields.array[0]).toBeFalsy();
    });
    it('should reassign event handlers when names change', function () {
      var store = makeStore();
      var renderFields = jest.fn(function () {
        return _react.default.createElement("div", null);
      });

      var Form =
      /*#__PURE__*/
      function (_Component38) {
        _inheritsLoose(Form, _Component38);

        function Form(props) {
          var _this10;

          _this10 = _Component38.call(this, props) || this;
          _this10.state = {
            names: ['foo', 'bar', 'deep.dive', 'array[0]']
          };
          _this10.changeNames = _this10.changeNames.bind(_assertThisInitialized(_assertThisInitialized(_this10)));
          return _this10;
        }

        var _proto38 = Form.prototype;

        _proto38.changeNames = function changeNames() {
          this.setState({
            names: ['fighter', 'fly.high', 'array[1]']
          });
        };

        _proto38.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Fields, {
            names: this.state.names,
            component: renderFields,
            someCustomProp: "testing",
            anotherCustomProp: 42,
            customBooleanFlag: true
          }), _react.default.createElement("button", {
            type: "button",
            onClick: this.changeNames
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      expect(renderFields).toHaveBeenCalled();
      expect(renderFields).toHaveBeenCalledTimes(1); // foo is inactive

      expect(renderFields.mock.calls[0][0].foo.meta.active).toBe(false); // focus on foo

      renderFields.mock.calls[0][0].foo.input.onFocus(); // foo is active

      expect(renderFields).toHaveBeenCalledTimes(2);
      expect(renderFields.mock.calls[1][0].foo.meta.active).toBe(true);
      expect(renderFields.mock.calls[1][0].foo.input.value).toBe(''); // change foo

      renderFields.mock.calls[1][0].foo.input.onChange('erikras'); // foo is changed

      expect(renderFields).toHaveBeenCalledTimes(3);
      expect(renderFields.mock.calls[2][0].foo.meta.active).toBe(true);
      expect(renderFields.mock.calls[2][0].foo.input.value).toBe('erikras'); // blur foo

      renderFields.mock.calls[2][0].foo.input.onBlur('@erikras'); // foo is blurred

      expect(renderFields).toHaveBeenCalledTimes(4);
      expect(renderFields.mock.calls[3][0].foo.meta.active).toBe(false);
      expect(renderFields.mock.calls[3][0].foo.input.value).toBe('@erikras'); // swap out fields

      _testUtils.default.Simulate.click(button); // original fields gone


      expect(renderFields).toHaveBeenCalledTimes(5);
      expect(renderFields.mock.calls[4][0].foo).toBeFalsy();
      expect(renderFields.mock.calls[4][0].fighter).toBeTruthy(); // fighter is inactive

      expect(renderFields.mock.calls[4][0].fighter.meta.active).toBe(false); // focus on fighter

      renderFields.mock.calls[4][0].fighter.input.onFocus(); // fighter is active

      expect(renderFields).toHaveBeenCalledTimes(6);
      expect(renderFields.mock.calls[5][0].fighter.meta.active).toBe(true);
      expect(renderFields.mock.calls[5][0].fighter.input.value).toBe(''); // change fighter

      renderFields.mock.calls[5][0].fighter.input.onChange('reduxForm'); // fighter is changed

      expect(renderFields).toHaveBeenCalledTimes(7);
      expect(renderFields.mock.calls[6][0].fighter.meta.active).toBe(true);
      expect(renderFields.mock.calls[6][0].fighter.input.value).toBe('reduxForm'); // blur fighter

      renderFields.mock.calls[6][0].fighter.input.onBlur('@reduxForm'); // fighter is blurred

      expect(renderFields).toHaveBeenCalledTimes(8);
      expect(renderFields.mock.calls[7][0].fighter.meta.active).toBe(false);
      expect(renderFields.mock.calls[7][0].fighter.input.value).toBe('@reduxForm');
    });
  });
};

describeFields('Fields.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeFields('Fields.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});