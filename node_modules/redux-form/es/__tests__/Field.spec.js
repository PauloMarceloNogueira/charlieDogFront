"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createField = _interopRequireDefault(require("../createField"));

var _FormSection = _interopRequireDefault(require("../FormSection"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

var _eventMocks = require("../util/eventMocks");

var _eventConsts = require("../util/eventConsts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var testFormName = 'testForm';

var describeField = function describeField(name, structure, combineReducers, setup) {
  var reduxForm = (0, _createReduxForm.default)(structure);
  var Field = (0, _createField.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  var TestInput =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(TestInput, _Component);

    function TestInput() {
      return _Component.apply(this, arguments) || this;
    }

    var _proto = TestInput.prototype;

    _proto.render = function render() {
      return _react.default.createElement("div", null, "TEST INPUT");
    };

    return TestInput;
  }(_react.Component);

  var testProps = function testProps(state, config) {
    var _makeStore;

    if (config === void 0) {
      config = {};
    }

    var store = makeStore((_makeStore = {}, _makeStore[testFormName] = state, _makeStore));

    var Form =
    /*#__PURE__*/
    function (_Component2) {
      _inheritsLoose(Form, _Component2);

      function Form() {
        return _Component2.apply(this, arguments) || this;
      }

      var _proto2 = Form.prototype;

      _proto2.render = function render() {
        return _react.default.createElement("div", null, _react.default.createElement(Field, {
          name: "foo",
          component: TestInput
        }));
      };

      return Form;
    }(_react.Component);

    var TestForm = reduxForm(_extends({
      form: testFormName
    }, config))(Form);

    var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(TestForm, null)));

    return _testUtils.default.findRenderedComponentWithType(dom, TestInput).props;
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should throw an error if not in ReduxForm', function () {
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement("div", null, _react.default.createElement(Field, {
          name: "foo",
          component: TestInput
        })));
      }).toThrow(/must be inside a component decorated with reduxForm/);
    });
    it('should throw an error if invalid component prop is provided', function () {
      var store = makeStore();
      var notAComponent = {};

      var Form =
      /*#__PURE__*/
      function (_Component3) {
        _inheritsLoose(Form, _Component3);

        function Form() {
          return _Component3.apply(this, arguments) || this;
        }

        var _proto3 = Form.prototype;

        _proto3.render = function render() {
          return _react.default.createElement(Field, {
            component: notAComponent
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/Element type is invalid/);
    });
    it('should get value from Redux state', function () {
      var props = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props.input.value).toBe('bar');
    });
    it('should get initial value from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        }
      });
      expect(props.meta.initial).toBe('bar');
    });
    it('should get dirty/pristine from Redux state', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        }
      });
      expect(props1.meta.pristine).toBe(true);
      expect(props1.meta.dirty).toBe(false);
      var props2 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        }
      });
      expect(props2.meta.pristine).toBe(false);
      expect(props2.meta.dirty).toBe(true);
      var props3 = testProps({
        initial: {
          foo: [4, 'abc', {
            def: null,
            key: [-45, '...', [0, 99]]
          }]
        },
        values: {
          foo: [4, 'abc', {
            def: null,
            key: [-45, '...', [0, 99]]
          }]
        }
      });
      expect(props3.meta.pristine).toBe(true);
      expect(props3.meta.dirty).toBe(false);
    });
    it('should allow an empty value from Redux state to be pristine', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: ''
        }
      });
      expect(props1.meta.pristine).toBe(false);
      expect(props1.meta.dirty).toBe(true);
      var props2 = testProps({
        initial: {
          foo: ''
        },
        values: {
          foo: ''
        }
      });
      expect(props2.meta.pristine).toBe(true);
      expect(props2.meta.dirty).toBe(false);
    });
    it('should get asyncValidating from Redux state', function () {
      var props1 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        asyncValidating: 'dog'
      });
      expect(props1.meta.asyncValidating).toBe(false);
      var props2 = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'baz'
        },
        asyncValidating: 'foo'
      });
      expect(props2.meta.asyncValidating).toBe(true);
    });
    it('should get active from Redux state', function () {
      var props1 = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props1.meta.active).toBe(false);
      var props2 = testProps({
        values: {
          foo: 'bar'
        },
        fields: {
          foo: {
            active: true
          }
        }
      });
      expect(props2.meta.active).toBe(true);
    });
    it('should get autofilled from Redux state', function () {
      var props1 = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props1.meta.autofilled).toBe(false);
      var props2 = testProps({
        values: {
          foo: 'bar'
        },
        fields: {
          foo: {
            autofilled: true
          }
        }
      });
      expect(props2.meta.autofilled).toBe(true);
    });
    it('should get touched from Redux state', function () {
      var props1 = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props1.meta.touched).toBe(false);
      var props2 = testProps({
        values: {
          foo: 'bar'
        },
        fields: {
          foo: {
            touched: true
          }
        }
      });
      expect(props2.meta.touched).toBe(true);
    });
    it('should get visited from Redux state', function () {
      var props1 = testProps({
        values: {
          foo: 'bar'
        }
      });
      expect(props1.meta.visited).toBe(false);
      var props2 = testProps({
        values: {
          foo: 'bar'
        },
        fields: {
          foo: {
            visited: true
          }
        }
      });
      expect(props2.meta.visited).toBe(true);
    });
    it('should pass in the form name as meta.form', function () {
      var props = testProps();
      expect(props.meta.form).toBe(testFormName);
    });
    it('should get sync errors from outer reduxForm component', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        registeredFields: {
          foo: {
            name: 'foo',
            type: 'Field'
          }
        }
      }, {
        validate: function validate() {
          return {
            foo: 'foo error'
          };
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get sync warnings from outer reduxForm component', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        registeredFields: {
          foo: {
            name: 'foo',
            type: 'Field'
          }
        }
      }, {
        warn: function warn() {
          return {
            foo: 'foo warning'
          };
        }
      });
      expect(props.meta.warning).toBe('foo warning');
    });
    it('should get async errors from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        asyncErrors: {
          foo: 'foo error'
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get submit errors from Redux state', function () {
      var props = testProps({
        initial: {
          foo: 'bar'
        },
        values: {
          foo: 'bar'
        },
        submitErrors: {
          foo: 'foo error'
        }
      });
      expect(props.meta.error).toBe('foo error');
    });
    it('should get submitFailed prop from Redux state', function () {
      var props = testProps({
        submitFailed: true
      });
      expect(props.meta.submitFailed).toBe(true);
    });
    it('should provide meta.dispatch', function () {
      var props = testProps({});
      expect(typeof props.meta.dispatch).toBe('function');
    });
    it('should provide name getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component4) {
        _inheritsLoose(Form, _Component4);

        function Form() {
          return _Component4.apply(this, arguments) || this;
        }

        var _proto4 = Form.prototype;

        _proto4.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toBe('foo');
    });
    it('should provide value getter', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component5) {
        _inheritsLoose(Form, _Component5);

        function Form() {
          return _Component5.apply(this, arguments) || this;
        }

        var _proto5 = Form.prototype;

        _proto5.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.value).toBe('bar');
    });
    it('should provide dirty getter that is true when dirty', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component6) {
        _inheritsLoose(Form, _Component6);

        function Form() {
          return _Component6.apply(this, arguments) || this;
        }

        var _proto6 = Form.prototype;

        _proto6.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(true);
    });
    it('should provide dirty getter that is false when pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: 'bar'
          },
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component7) {
        _inheritsLoose(Form, _Component7);

        function Form() {
          return _Component7.apply(this, arguments) || this;
        }

        var _proto7 = Form.prototype;

        _proto7.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.dirty).toBe(false);
    });
    it('should provide pristine getter that is false when dirty', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component8) {
        _inheritsLoose(Form, _Component8);

        function Form() {
          return _Component8.apply(this, arguments) || this;
        }

        var _proto8 = Form.prototype;

        _proto8.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(false);
    });
    it('should provide pristine getter that is true when pristine', function () {
      var store = makeStore({
        testForm: {
          initial: {
            foo: 'bar'
          },
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component9) {
        _inheritsLoose(Form, _Component9);

        function Form() {
          return _Component9.apply(this, arguments) || this;
        }

        var _proto9 = Form.prototype;

        _proto9.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.pristine).toBe(true);
    });
    it('should have value set to initial value on first render', function () {
      var store = makeStore({});
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component10) {
        _inheritsLoose(Form, _Component10);

        function Form() {
          return _Component10.apply(this, arguments) || this;
        }

        var _proto10 = Form.prototype;

        _proto10.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, {
        initialValues: {
          foo: 'bar'
        }
      })));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('bar');
    });
    it('should provide sync error for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate() {
        return {
          foo: ['bar error']
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component11) {
        _inheritsLoose(Form, _Component11);

        function Form() {
          return _Component11.apply(this, arguments) || this;
        }

        var _proto11 = Form.prototype;

        _proto11.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo[0]",
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].meta.valid).toBe(false);
      expect(input.mock.calls[1][0].meta.error).toBe('bar error');
    });
    it('should provide sync warning for array field', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: ['bar']
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn() {
        return {
          foo: ['bar warning']
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component12) {
        _inheritsLoose(Form, _Component12);

        function Form() {
          return _Component12.apply(this, arguments) || this;
        }

        var _proto12 = Form.prototype;

        _proto12.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo[0]",
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].meta.warning).toBe('bar warning');
    });
    it('should provide access to rendered component', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'bar'
          }
        }
      });

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component13) {
        _inheritsLoose(Form, _Component13);

        function Form() {
          return _Component13.apply(this, arguments) || this;
        }

        var _proto13 = Form.prototype;

        _proto13.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: TestInput,
            forwardRef: true,
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var field = ref.current;

      var input = _testUtils.default.findRenderedComponentWithType(dom, TestInput);

      expect(field.getRenderedComponent()).toBe(input);
    });
    it('should reconnect when name changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 'fooValue',
            bar: 'barValue'
          },
          fields: {
            bar: {
              touched: true
            }
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component14) {
        _inheritsLoose(Form, _Component14);

        function Form() {
          var _this;

          _this = _Component14.call(this) || this;
          _this.state = {
            field: 'foo'
          };
          return _this;
        }

        var _proto14 = Form.prototype;

        _proto14.render = function render() {
          var _this2 = this;

          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: this.state.field,
            component: input
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this2.setState({
                field: 'bar'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('fooValue');
      expect(input.mock.calls[0][0].meta.touched).toBe(false);

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('barValue');
      expect(input.mock.calls[1][0].meta.touched).toBe(true);
    });
    it('should prefix name getter when inside FormSection', function () {
      var store = makeStore();

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component15) {
        _inheritsLoose(Form, _Component15);

        function Form() {
          return _Component15.apply(this, arguments) || this;
        }

        var _proto15 = Form.prototype;

        _proto15.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo",
            component: "span"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input",
            ref: ref
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toBe('foo.bar');
    });
    it('should prefix name getter when inside multiple FormSection', function () {
      var store = makeStore();

      var ref = _react.default.createRef();

      var Form =
      /*#__PURE__*/
      function (_Component16) {
        _inheritsLoose(Form, _Component16);

        function Form() {
          return _Component16.apply(this, arguments) || this;
        }

        var _proto16 = Form.prototype;

        _proto16.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input",
            ref: ref
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(ref.current.name).toBe('foo.fighter.bar');
    });
    it('should prefix name when inside FormSection', function () {
      var store = makeStore();

      var Form =
      /*#__PURE__*/
      function (_Component17) {
        _inheritsLoose(Form, _Component17);

        function Form() {
          return _Component17.apply(this, arguments) || this;
        }

        var _proto17 = Form.prototype;

        _proto17.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo",
            component: "span"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input"
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should prefix name when inside multiple FormSections', function () {
      var store = makeStore();

      var Form =
      /*#__PURE__*/
      function (_Component18) {
        _inheritsLoose(Form, _Component18);

        function Form() {
          return _Component18.apply(this, arguments) || this;
        }

        var _proto18 = Form.prototype;

        _proto18.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(_FormSection.default, {
            name: "fighter"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input"
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              'foo.fighter.bar': {
                name: 'foo.fighter.bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should re-register when name changes', function () {
      var store = makeStore();

      var Form =
      /*#__PURE__*/
      function (_Component19) {
        _inheritsLoose(Form, _Component19);

        function Form() {
          var _this3;

          _this3 = _Component19.call(this) || this;
          _this3.state = {
            field: 'foo'
          };
          return _this3;
        }

        var _proto19 = Form.prototype;

        _proto19.render = function render() {
          var _this4 = this;

          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: this.state.field,
            component: "input"
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this4.setState({
                field: 'bar'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              foo: {
                name: 'foo',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            registeredFields: {
              bar: {
                name: 'bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should rerender when props change', function () {
      var store = makeStore();
      var input = jest.fn(function (props) {
        return _react.default.createElement("div", null, props.highlighted, _react.default.createElement("input", props.input));
      });

      var Form =
      /*#__PURE__*/
      function (_Component20) {
        _inheritsLoose(Form, _Component20);

        function Form() {
          var _this5;

          _this5 = _Component20.call(this) || this;
          _this5.state = {
            highlighted: 0
          };
          return _this5;
        }

        var _proto20 = Form.prototype;

        _proto20.render = function render() {
          var _this6 = this;

          var highlighted = this.state.highlighted;
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            highlighted: highlighted,
            component: input
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this6.setState({
                highlighted: highlighted + 1
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].highlighted).toBe(0);

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].highlighted).toBe(1);
    });
    it('should NOT rerender when props.props is shallow-equal, but !==', function () {
      var store = makeStore();
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderSpy = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component21) {
        _inheritsLoose(Form, _Component21);

        function Form() {
          var _this7;

          _this7 = _Component21.call(this) || this;
          _this7.state = {
            foo: 'bar'
          };
          return _this7;
        }

        var _proto21 = Form.prototype;

        _proto21.render = function render() {
          var _this8 = this;

          renderSpy();
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "myField",
            component: input,
            props: {
              rel: 'test'
            }
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this8.setState({
                foo: 'qux'
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderSpy).toHaveBeenCalled();
      expect(renderSpy).toHaveBeenCalledTimes(1);
      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].rel).toBe('test');

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(renderSpy).toHaveBeenCalledTimes(2);
      expect(input).toHaveBeenCalledTimes(1);
    });
    it('should call normalize function on change', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var normalize = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component22) {
        _inheritsLoose(Form, _Component22);

        function Form() {
          return _Component22.apply(this, arguments) || this;
        }

        var _proto22 = Form.prototype;

        _proto22.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername,
            normalize: normalize
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(normalize).not.toHaveBeenCalled();
      expect(renderUsername.mock.calls[0][0].input.value).toBe('oldusername');
      renderUsername.mock.calls[0][0].input.onChange('ERIKRAS');
      expect(normalize).toHaveBeenCalledWith('ERIKRAS', 'oldusername', fromJS({
        title: 'Redux Form',
        author: 'Erik Rasmussen',
        username: 'ERIKRAS'
      }), fromJS({
        title: 'Redux Form',
        author: 'Erik Rasmussen',
        username: 'oldusername'
      }), 'username');
      expect(normalize).toHaveBeenCalledTimes(1);
      expect(renderUsername.mock.calls[1][0].input.value).toBe('erikras');
    });
    it('should call normalize function on blur', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var normalize = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component23) {
        _inheritsLoose(Form, _Component23);

        function Form() {
          return _Component23.apply(this, arguments) || this;
        }

        var _proto23 = Form.prototype;

        _proto23.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername,
            normalize: normalize
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(normalize).not.toHaveBeenCalled();
      expect(renderUsername.mock.calls[0][0].input.value).toBe('oldusername');
      renderUsername.mock.calls[0][0].input.onBlur('ERIKRAS');
      expect(normalize).toHaveBeenCalledWith('ERIKRAS', 'oldusername', fromJS({
        title: 'Redux Form',
        author: 'Erik Rasmussen',
        username: 'ERIKRAS'
      }), fromJS({
        title: 'Redux Form',
        author: 'Erik Rasmussen',
        username: 'oldusername'
      }), 'username');
      expect(normalize).toHaveBeenCalledTimes(1);
      expect(renderUsername.mock.calls[1][0].input.value).toBe('erikras');
    });
    it('should call asyncValidate function on blur', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component24) {
        _inheritsLoose(Form, _Component24);

        function Form() {
          return _Component24.apply(this, arguments) || this;
        }

        var _proto24 = Form.prototype;

        _proto24.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onBlur('ERIKRAS');
      expect(asyncValidate).toHaveBeenCalled();
    });
    it('should call asyncValidate function on change', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component25) {
        _inheritsLoose(Form, _Component25);

        function Form() {
          return _Component25.apply(this, arguments) || this;
        }

        var _proto25 = Form.prototype;

        _proto25.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onChange('ERIKRAS');
      expect(asyncValidate).toHaveBeenCalled();
    });
    it('should call asyncValidate function on blur if field is specified', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component26) {
        _inheritsLoose(Form, _Component26);

        function Form() {
          return _Component26.apply(this, arguments) || this;
        }

        var _proto26 = Form.prototype;

        _proto26.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncBlurFields: ['username']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onBlur('ERIKRAS');
      expect(asyncValidate).toHaveBeenCalled();
    });
    it('should call asyncValidate function on change if field is specified', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component27) {
        _inheritsLoose(Form, _Component27);

        function Form() {
          return _Component27.apply(this, arguments) || this;
        }

        var _proto27 = Form.prototype;

        _proto27.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncChangeFields: ['username']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onChange('ERIKRAS');
      expect(asyncValidate).toHaveBeenCalled();
    });
    it('should not call asyncValidate function on blur if field is specified and different', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component28) {
        _inheritsLoose(Form, _Component28);

        function Form() {
          return _Component28.apply(this, arguments) || this;
        }

        var _proto28 = Form.prototype;

        _proto28.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncBlurFields: ['author']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onBlur('ERIKRAS');
      expect(asyncValidate).not.toHaveBeenCalled();
    });
    it('should not call asyncValidate function on change if field is specified and different', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component29) {
        _inheritsLoose(Form, _Component29);

        function Form() {
          return _Component29.apply(this, arguments) || this;
        }

        var _proto29 = Form.prototype;

        _proto29.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncChangeFields: ['author']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onChange('ERIKRAS');
      expect(asyncValidate).not.toHaveBeenCalled();
    });
    it('should not call asyncValidate function on change if field is specified as onBlur', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component30) {
        _inheritsLoose(Form, _Component30);

        function Form() {
          return _Component30.apply(this, arguments) || this;
        }

        var _proto30 = Form.prototype;

        _proto30.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncBlurFields: ['username']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onChange('ERIKRAS');
      expect(asyncValidate).not.toHaveBeenCalled();
    });
    it('should not call asyncValidate function on blur if field is specified as onChange', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            username: 'oldusername'
          }
        }
      });
      var renderUsername = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component31) {
        _inheritsLoose(Form, _Component31);

        function Form() {
          return _Component31.apply(this, arguments) || this;
        }

        var _proto31 = Form.prototype;

        _proto31.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "username",
            component: renderUsername
          }));
        };

        return Form;
      }(_react.Component);

      var asyncValidate = jest.fn(function () {
        return new Promise(function (resolve) {
          return resolve();
        });
      });
      var TestForm = reduxForm({
        form: 'testForm',
        asyncValidate: asyncValidate,
        asyncChangeFields: ['username']
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      renderUsername.mock.calls[0][0].input.onBlur('ERIKRAS');
      expect(asyncValidate).not.toHaveBeenCalled();
    });
    it('should call handle on focus', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form'
          }
        }
      });
      var renderTitle = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component32) {
        _inheritsLoose(Form, _Component32);

        function Form() {
          return _Component32.apply(this, arguments) || this;
        }

        var _proto32 = Form.prototype;

        _proto32.render = function render() {
          return _react.default.createElement(Field, {
            name: "title",
            component: renderTitle
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderTitle.mock.calls[0][0].meta.visited).toBe(false);
      renderTitle.mock.calls[0][0].input.onFocus();
      expect(renderTitle.mock.calls[1][0].meta.visited).toBe(true);
    });
    it('should not change the value of a radio when blur', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form',
            author: 'Erik Rasmussen',
            sex: 'male'
          }
        }
      });
      var renderSex = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component33) {
        _inheritsLoose(Form, _Component33);

        function Form() {
          return _Component33.apply(this, arguments) || this;
        }

        var _proto33 = Form.prototype;

        _proto33.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "title",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "author",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "sex",
            value: "female",
            type: "radio",
            component: renderSex
          }), _react.default.createElement(Field, {
            name: "sex",
            value: "male",
            type: "radio",
            component: renderSex
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderSex.mock.calls[0][0].input.checked).toBe(false);
      expect(renderSex.mock.calls[1][0].input.checked).toBe(true);
      renderSex.mock.calls[0][0].input.onBlur('female');
      expect(renderSex.mock.calls[2][0].input.checked).toBe(false);
      expect(renderSex.mock.calls[3][0].input.checked).toBe(true);
    });
    it('should call handle on drag start with value', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form'
          }
        }
      });
      var renderTitle = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var dragSpy = jest.fn(function (key, val) {
        return val;
      });
      var event = (0, _eventMocks.dragStartMock)(dragSpy);

      var Form =
      /*#__PURE__*/
      function (_Component34) {
        _inheritsLoose(Form, _Component34);

        function Form() {
          return _Component34.apply(this, arguments) || this;
        }

        var _proto34 = Form.prototype;

        _proto34.render = function render() {
          return _react.default.createElement(Field, {
            name: "title",
            component: renderTitle
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(dragSpy).not.toHaveBeenCalled();
      renderTitle.mock.calls[0][0].input.onDragStart(event);
      expect(dragSpy).toHaveBeenCalledWith(_eventConsts.dataKey, 'Redux Form');
    });
    it('should call handle on drag start without value', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: null
          }
        }
      });
      var renderTitle = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var dragSpy = jest.fn(function (key, val) {
        return val;
      });
      var event = (0, _eventMocks.dragStartMock)(dragSpy);

      var Form =
      /*#__PURE__*/
      function (_Component35) {
        _inheritsLoose(Form, _Component35);

        function Form() {
          return _Component35.apply(this, arguments) || this;
        }

        var _proto35 = Form.prototype;

        _proto35.render = function render() {
          return _react.default.createElement(Field, {
            name: "title",
            component: renderTitle
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(dragSpy).not.toHaveBeenCalled();
      renderTitle.mock.calls[0][0].input.onDragStart(event);
      expect(dragSpy).toHaveBeenCalledWith(_eventConsts.dataKey, '');
    });
    it('should call handle on drop', function () {
      var store = makeStore({
        testForm: {
          values: {
            title: 'Redux Form'
          }
        }
      });
      var renderTitle = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var dropSpy = jest.fn(function (key) {
        return key;
      });
      var event = (0, _eventMocks.dropMock)(dropSpy);
      event.preventDefault = jest.fn(event.preventDefault);

      var Form =
      /*#__PURE__*/
      function (_Component36) {
        _inheritsLoose(Form, _Component36);

        function Form() {
          return _Component36.apply(this, arguments) || this;
        }

        var _proto36 = Form.prototype;

        _proto36.render = function render() {
          return _react.default.createElement(Field, {
            name: "title",
            component: renderTitle
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(dropSpy).not.toHaveBeenCalled();
      renderTitle.mock.calls[0][0].input.onDrop(event);
      expect(event.preventDefault).toHaveBeenCalled();
      expect(dropSpy).toHaveBeenCalledWith(_eventConsts.dataKey);
    });
    it('should call format function on first render', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'Redux Form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var format = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component37) {
        _inheritsLoose(Form, _Component37);

        function Form() {
          return _Component37.apply(this, arguments) || this;
        }

        var _proto37 = Form.prototype;

        _proto37.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "name",
            component: input,
            format: format
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(1);
      expect(format.mock.calls[0]).toEqual(['Redux Form', 'name']);
      expect(input.mock.calls[0][0].input.value).toBe('redux form');
    });
    it('should call parse function on change', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component38) {
        _inheritsLoose(Form, _Component38);

        function Form() {
          return _Component38.apply(this, arguments) || this;
        }

        var _proto38 = Form.prototype;

        _proto38.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "name",
            component: input,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(parse).not.toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('redux form');
      input.mock.calls[0][0].input.onChange('REDUX FORM ROCKS');
      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['REDUX FORM ROCKS', 'name']);
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('redux form rocks');
    });
    it('should call parse function on blur', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value.toLowerCase();
      });

      var Form =
      /*#__PURE__*/
      function (_Component39) {
        _inheritsLoose(Form, _Component39);

        function Form() {
          return _Component39.apply(this, arguments) || this;
        }

        var _proto39 = Form.prototype;

        _proto39.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "name",
            component: input,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(parse).not.toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('redux form');
      input.mock.calls[0][0].input.onBlur('REDUX FORM ROCKS');
      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['REDUX FORM ROCKS', 'name']);
      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('redux form rocks');
    });
    it('should not update a value if onBlur is passed undefined', function () {
      var store = makeStore({
        testForm: {
          values: {
            name: 'redux form'
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component40) {
        _inheritsLoose(Form, _Component40);

        function Form() {
          return _Component40.apply(this, arguments) || this;
        }

        var _proto40 = Form.prototype;

        _proto40.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "name",
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // verify state


      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              name: 'redux form'
            },
            registeredFields: {
              name: {
                name: 'name',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // verify props

      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].meta.active).toBe(false);
      expect(input.mock.calls[0][0].input.value).toBe('redux form'); // call onFocus

      input.mock.calls[0][0].input.onFocus(); // verify state

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            active: 'name',
            values: {
              name: 'redux form'
            },
            registeredFields: {
              name: {
                name: 'name',
                type: 'Field',
                count: 1
              }
            },
            fields: {
              name: {
                visited: true,
                active: true
              }
            }
          }
        }
      }); // verify props

      expect(input).toHaveBeenCalledTimes(2); // active now

      expect(input.mock.calls[1][0].meta.active).toBe(true);
      expect(input.mock.calls[1][0].input.value).toBe('redux form'); // call onBlur

      input.mock.calls[0][0].input.onBlur(); // verify state

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            anyTouched: true,
            values: {
              name: 'redux form' // UNCHANGED!

            },
            registeredFields: {
              name: {
                name: 'name',
                type: 'Field',
                count: 1
              }
            },
            fields: {
              name: {
                visited: true,
                touched: true
              }
            }
          }
        }
      }); // verify props

      expect(input).toHaveBeenCalledTimes(3); // not active now

      expect(input.mock.calls[2][0].meta.active).toBe(false);
      expect(input.mock.calls[2][0].input.value).toBe('redux form'); // UNCHANGED!
    });
    it('should parse and format to maintain different type in store', function () {
      var store = makeStore({
        testForm: {
          values: {
            age: 42
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var parse = jest.fn(function (value) {
        return value && parseInt(value, 10);
      });
      var format = jest.fn(function (value) {
        return value && value.toString();
      });

      var Form =
      /*#__PURE__*/
      function (_Component41) {
        _inheritsLoose(Form, _Component41);

        function Form() {
          return _Component41.apply(this, arguments) || this;
        }

        var _proto41 = Form.prototype;

        _proto41.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "age",
            component: input,
            format: format,
            parse: parse
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // format called once


      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(1); // parse not called yet

      expect(parse).not.toHaveBeenCalled(); // input displaying string value

      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('42'); // update value

      input.mock.calls[0][0].input.onChange('15'); // parse was called

      expect(parse).toHaveBeenCalled();
      expect(parse).toHaveBeenCalledTimes(1);
      expect(parse.mock.calls[0]).toEqual(['15', 'age']); // value in store is number

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              age: 15 // number

            },
            registeredFields: {
              age: {
                name: 'age',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      }); // format called again

      expect(format).toHaveBeenCalled();
      expect(format).toHaveBeenCalledTimes(2);
      expect(format.mock.calls[1]).toEqual([15, 'age']); // input rerendered with string value

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('15');
    });
    it('should rerender when sync error changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            password: 'redux-form sucks',
            confirm: 'redux-form rocks'
          }
        }
      });
      var passwordInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var confirmInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate(values) {
        var password = getIn(values, 'password');
        var confirm = getIn(values, 'confirm');
        return password === confirm ? {} : {
          confirm: 'Must match!'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component42) {
        _inheritsLoose(Form, _Component42);

        function Form() {
          return _Component42.apply(this, arguments) || this;
        }

        var _proto42 = Form.prototype;

        _proto42.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "password",
            component: passwordInput
          }), _react.default.createElement(Field, {
            name: "confirm",
            component: confirmInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // password input rendered


      expect(passwordInput).toHaveBeenCalled();
      expect(passwordInput).toHaveBeenCalledTimes(1); // confirm input rendered with error

      expect(confirmInput).toHaveBeenCalled();
      expect(confirmInput).toHaveBeenCalledTimes(2);
      expect(confirmInput.mock.calls[1][0].meta.valid).toBe(false);
      expect(confirmInput.mock.calls[1][0].meta.error).toBe('Must match!'); // update password field so that they match

      passwordInput.mock.calls[0][0].input.onChange('redux-form rocks'); // password input rerendered

      expect(passwordInput).toHaveBeenCalledTimes(2); // confirm input should also rerender, but with no error

      expect(confirmInput).toHaveBeenCalledTimes(3);
      expect(confirmInput.mock.calls[2][0].meta.valid).toBe(true);
      expect(confirmInput.mock.calls[2][0].meta.error).toBe(undefined);
    });
    it('should rerender when sync error is cleared', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var validate = function validate(values) {
        var username = getIn(values, 'username');
        return username ? {} : {
          username: 'Required'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component43) {
        _inheritsLoose(Form, _Component43);

        function Form() {
          return _Component43.apply(this, arguments) || this;
        }

        var _proto43 = Form.prototype;

        _proto43.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        validate: validate
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2); // username field has error

      expect(usernameInput.mock.calls[1][0].meta.valid).toBe(false);
      expect(usernameInput.mock.calls[1][0].meta.error).toBe('Required'); // update username field so it passes

      usernameInput.mock.calls[1][0].input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].meta.valid).toBe(true);
      expect(usernameInput.mock.calls[3][0].meta.error).toBe(undefined);
    });
    it('should rerender when sync warning changes', function () {
      var store = makeStore({
        testForm: {
          values: {
            password: 'redux-form sucks',
            confirm: 'redux-form rocks'
          }
        }
      });
      var passwordInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var confirmInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn(values) {
        var password = getIn(values, 'password');
        var confirm = getIn(values, 'confirm');
        return password === confirm ? {} : {
          confirm: 'Should match. Or not. Whatever.'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component44) {
        _inheritsLoose(Form, _Component44);

        function Form() {
          return _Component44.apply(this, arguments) || this;
        }

        var _proto44 = Form.prototype;

        _proto44.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "password",
            component: passwordInput
          }), _react.default.createElement(Field, {
            name: "confirm",
            component: confirmInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // password input rendered


      expect(passwordInput).toHaveBeenCalled();
      expect(passwordInput).toHaveBeenCalledTimes(1); // confirm input rendered with warning

      expect(confirmInput).toHaveBeenCalled();
      expect(confirmInput).toHaveBeenCalledTimes(2);
      expect(confirmInput.mock.calls[1][0].meta.warning).toBe('Should match. Or not. Whatever.'); // update password field so that they match

      passwordInput.mock.calls[0][0].input.onChange('redux-form rocks'); // password input rerendered

      expect(passwordInput).toHaveBeenCalledTimes(2); // confirm input should also rerender, but with no warning

      expect(confirmInput).toHaveBeenCalledTimes(3);
      expect(confirmInput.mock.calls[2][0].meta.warning).toBe(undefined);
    });
    it('should rerender when sync warning is cleared', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var warn = function warn(values) {
        var username = getIn(values, 'username');
        return username ? {} : {
          username: 'Recommended'
        };
      };

      var Form =
      /*#__PURE__*/
      function (_Component45) {
        _inheritsLoose(Form, _Component45);

        function Form() {
          return _Component45.apply(this, arguments) || this;
        }

        var _proto45 = Form.prototype;

        _proto45.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm',
        warn: warn
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2); // username field has warning

      expect(usernameInput.mock.calls[1][0].meta.warning).toBe('Recommended'); // update username field so it passes

      usernameInput.mock.calls[1][0].input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].meta.warning).toBe(undefined);
    });
    it('should sync validate with field level validator', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var required = jest.fn(function (value) {
        return value == null ? 'Required' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component46) {
        _inheritsLoose(Form, _Component46);

        function Form() {
          return _Component46.apply(this, arguments) || this;
        }

        var _proto46 = Form.prototype;

        _proto46.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput,
            validate: required
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2);
      expect(required).toHaveBeenCalled();
      expect(required).toHaveBeenCalledTimes(1); // username field has error

      expect(usernameInput.mock.calls[1][0].meta.valid).toBe(false);
      expect(usernameInput.mock.calls[1][0].meta.error).toBe('Required'); // update username field so it passes

      usernameInput.mock.calls[0][0].input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].meta.valid).toBe(true);
      expect(usernameInput.mock.calls[3][0].meta.error).toBe(undefined);
    }); //it('should sync validate with multiple field level validators', () => {
    //  const store = makeStore()
    //  const usernameInput = createSpy(props =>
    //    <input {...props.input} />
    //  ).andCallThrough()
    //  const required = createSpy(
    //    value => (value == null ? 'Required' : undefined)
    //  ).andCallThrough()
    //  const minLength5 = createSpy(
    //    value => (value && value.length < 5 ? 'Min length 5' : undefined)
    //  ).andCallThrough()
    //  class Form extends Component {
    //    render() {
    //      return (
    //        <div>
    //          <Field
    //            name="username"
    //            component={usernameInput}
    //            validate={[required, minLength5]}
    //          />
    //        </div>
    //      )
    //    }
    //  }
    //  const TestForm = reduxForm({
    //    form: 'testForm'
    //  })(Form)
    //  TestUtils.renderIntoDocument(
    //    <Provider store={store}>
    //      <TestForm />
    //    </Provider>
    //  )
    //
    //  // username input rendered
    //  expect(usernameInput).toHaveBeenCalled()
    //  expect(usernameInput.calls.length).toBe(2)
    //  expect(required).toHaveBeenCalled()
    //  expect(required.calls.length).toBe(1)
    //
    //  // username field has error
    //  expect(usernameInput.calls[1].arguments[0].meta.valid).toBe(false)
    //  expect(usernameInput.calls[1].arguments[0].meta.error).toBe('Required')
    //
    //  // update username field so it passes
    //  usernameInput.calls[0].arguments[0].input.onChange('erikras')
    //
    //  // username input rerendered
    //  expect(usernameInput.calls.length).toBe(3)
    //
    //  // should be valid now
    //  expect(usernameInput.calls[2].arguments[0].meta.valid).toBe(true)
    //  expect(usernameInput.calls[2].arguments[0].meta.error).toBe(undefined)
    //})

    it('should update field level validation when validate prop changes', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var required = jest.fn(function (value) {
        return value == null ? 'Required' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component47) {
        _inheritsLoose(Form, _Component47);

        function Form() {
          var _this9;

          _this9 = _Component47.call(this) || this;
          _this9.state = {
            validate: undefined
          };
          return _this9;
        }

        var _proto47 = Form.prototype;

        _proto47.render = function render() {
          var _this10 = this;

          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput,
            validate: this.state.validate
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this10.setState({
                validate: required
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username field is ok


      expect(usernameInput.mock.calls[usernameInput.mock.calls.length - 1][0].meta.valid).toBe(true); // update validate prop

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button); // should be invalid now


      expect(usernameInput.mock.calls[usernameInput.mock.calls.length - 1][0].meta.valid).toBe(false);
      expect(usernameInput.mock.calls[usernameInput.mock.calls.length - 1][0].meta.error).toBe('Required');
    });
    it('should revalidate when Field unregisters and registers with new validate prop', function () {
      var weightFieldName = 'weight';
      var weightValue = 100;
      var initialWeightLimit = 20;
      var nextWeightLimit = 50;
      var store = makeStore({
        testForm: {
          values: {
            weight: weightValue
          }
        }
      });
      var renderWeight = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var weightValidationText = 'Max allowed weight is ';

      var getWeightLimitValidator = function getWeightLimitValidator(weightLimit) {
        return jest.fn(function (value) {
          return value > weightLimit ? weightValidationText + weightLimit : undefined;
        });
      };

      var Form =
      /*#__PURE__*/
      function (_Component48) {
        _inheritsLoose(Form, _Component48);

        function Form() {
          var _this11;

          _this11 = _Component48.call(this) || this;
          _this11.state = {
            weightLimit: initialWeightLimit,
            validate: [getWeightLimitValidator(initialWeightLimit)]
          };
          return _this11;
        }

        var _proto48 = Form.prototype;

        _proto48.render = function render() {
          var _this12 = this;

          // This will trigger unregister and register Field
          // and these must happen in correct order for Field validation to work
          var someCrazyBusinessLogic = this.state.weightLimit > 30;
          return _react.default.createElement("div", null, someCrazyBusinessLogic && _react.default.createElement(Field, {
            name: weightFieldName,
            component: renderWeight,
            validate: this.state.validate
          }), !someCrazyBusinessLogic && _react.default.createElement(Field, {
            name: weightFieldName,
            component: renderWeight,
            validate: this.state.validate
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this12.setState({
                weightLimit: nextWeightLimit,
                validate: [getWeightLimitValidator(nextWeightLimit)]
              });
            }
          }, "Change weight limit"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: testFormName
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      testWeightValidator(initialWeightLimit);

      var changeWeightLimit = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(changeWeightLimit);

      testWeightValidator(nextWeightLimit);

      function testWeightValidator(weightLimit) {
        expect(renderWeight.mock.calls[renderWeight.mock.calls.length - 1][0].meta.valid).toBe(false);
        expect(renderWeight.mock.calls[renderWeight.mock.calls.length - 1][0].meta.error).toBe(weightValidationText + weightLimit);
      }
    });
    it('should sync warn with field level warning function', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var required = jest.fn(function (value) {
        return value == null ? 'Recommended' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component49) {
        _inheritsLoose(Form, _Component49);

        function Form() {
          return _Component49.apply(this, arguments) || this;
        }

        var _proto49 = Form.prototype;

        _proto49.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput,
            warn: required
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username input rendered


      expect(usernameInput).toHaveBeenCalled();
      expect(usernameInput).toHaveBeenCalledTimes(2);
      expect(required).toHaveBeenCalled();
      expect(required).toHaveBeenCalledTimes(1); // username field has warning

      expect(usernameInput.mock.calls[1][0].meta.valid).toBe(true);
      expect(usernameInput.mock.calls[1][0].meta.warning).toBe('Recommended'); // update username field so it passes

      usernameInput.mock.calls[0][0].input.onChange('erikras'); // username input rerendered

      expect(usernameInput).toHaveBeenCalledTimes(4); // should be valid now

      expect(usernameInput.mock.calls[3][0].meta.valid).toBe(true);
      expect(usernameInput.mock.calls[3][0].meta.warning).toBe(undefined);
    });
    it('should update field level warning when warn prop changes', function () {
      var store = makeStore();
      var usernameInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var required = jest.fn(function (value) {
        return value == null ? 'Required' : undefined;
      });

      var Form =
      /*#__PURE__*/
      function (_Component50) {
        _inheritsLoose(Form, _Component50);

        function Form() {
          var _this13;

          _this13 = _Component50.call(this) || this;
          _this13.state = {
            warn: undefined
          };
          return _this13;
        }

        var _proto50 = Form.prototype;

        _proto50.render = function render() {
          var _this14 = this;

          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "username",
            component: usernameInput,
            warn: this.state.warn
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this14.setState({
                warn: required
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // username field is ok


      expect(usernameInput.mock.calls[usernameInput.mock.calls.length - 1][0].meta.warning).toBe(undefined); // update warn prop

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button); // should have warning now


      expect(usernameInput.mock.calls[usernameInput.mock.calls.length - 1][0].meta.warning).toBe('Required');
    });
    it('should not generate any warnings by passing api props into custom', function () {
      var store = makeStore();
      var renderSpy = jest.fn();

      var InputComponent =
      /*#__PURE__*/
      function (_Component51) {
        _inheritsLoose(InputComponent, _Component51);

        function InputComponent() {
          return _Component51.apply(this, arguments) || this;
        }

        var _proto51 = InputComponent.prototype;

        _proto51.render = function render() {
          renderSpy(this.props);
          return _react.default.createElement("input", this.props.input);
        };

        return InputComponent;
      }(_react.Component);

      var apiProps = {
        // all the official API props you can pass to Field
        component: InputComponent,
        name: 'foo',
        normalize: function normalize(x) {
          return x;
        },
        parse: function parse(x) {
          return x;
        },
        props: {},
        format: function format(x) {
          return x;
        },
        validate: function validate() {
          return undefined;
        },
        warn: function warn() {
          return undefined;
        },
        forwardRef: true,
        immutableProps: []
      };

      var Form =
      /*#__PURE__*/
      function (_Component52) {
        _inheritsLoose(Form, _Component52);

        function Form() {
          return _Component52.apply(this, arguments) || this;
        }

        var _proto52 = Form.prototype;

        _proto52.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, apiProps));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(renderSpy).toHaveBeenCalled();
      var props = renderSpy.mock.calls[0][0];
      Object.keys(apiProps).forEach(function (key) {
        return expect(props[key]).toBeFalsy();
      });
    });
    it('should only rerender field that has changed', function () {
      var store = makeStore();
      var input1 = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var input2 = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component53) {
        _inheritsLoose(Form, _Component53);

        function Form() {
          return _Component53.apply(this, arguments) || this;
        }

        var _proto53 = Form.prototype;

        _proto53.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "input1",
            component: input1
          }), _react.default.createElement(Field, {
            name: "input2",
            component: input2
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(input1).toHaveBeenCalled();
      expect(input1).toHaveBeenCalledTimes(1);
      expect(input1.mock.calls[0][0].input.value).toBe('');
      expect(input2).toHaveBeenCalled();
      expect(input2).toHaveBeenCalledTimes(1);
      expect(input2.mock.calls[0][0].input.value).toBe(''); // change input #1

      input1.mock.calls[0][0].input.onChange('foo'); // expect input #1 to have been rerendered

      expect(input1).toHaveBeenCalledTimes(2);
      expect(input1.mock.calls[1][0].input.value).toBe('foo'); // expect input #2 to NOT have been rerendered

      expect(input2).toHaveBeenCalledTimes(1);
    });
    it('should allow onChange callback', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component54) {
        _inheritsLoose(Form, _Component54);

        function Form() {
          return _Component54.apply(this, arguments) || this;
        }

        var _proto54 = Form.prototype;

        _proto54.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onChange: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      input.value = 'bar';
      expect(callback).not.toHaveBeenCalled(); // rendered once with no onChange prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onChange).toBeFalsy();

      _testUtils.default.Simulate.change(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy(); // event

      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value changed

      expect(renderInput).toHaveBeenCalledTimes(2);
      expect(renderInput.mock.calls[1][0].input.value).toBe('bar');
    });
    it('should allow onChange callback to prevent change', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn(function (event) {
        return event.preventDefault();
      });

      var Form =
      /*#__PURE__*/
      function (_Component55) {
        _inheritsLoose(Form, _Component55);

        function Form() {
          return _Component55.apply(this, arguments) || this;
        }

        var _proto55 = Form.prototype;

        _proto55.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onChange: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      input.value = 'bar';
      expect(callback).not.toHaveBeenCalled(); // rendered once with no onChange prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onChange).toBeFalsy();

      _testUtils.default.Simulate.change(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy();
      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value NOT changed

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].input.value).toBe('');
    });
    it('should allow onBlur callback', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component56) {
        _inheritsLoose(Form, _Component56);

        function Form() {
          return _Component56.apply(this, arguments) || this;
        }

        var _proto56 = Form.prototype;

        _proto56.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onBlur: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      input.value = 'bar';
      expect(callback).not.toHaveBeenCalled(); // rendered once with no onBlur prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onBlur).toBeFalsy();

      _testUtils.default.Simulate.blur(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy(); // event

      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value changed

      expect(renderInput).toHaveBeenCalledTimes(2);
      expect(renderInput.mock.calls[1][0].input.value).toBe('bar');
    });
    it('should allow onBlur callback to prevent blur', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn(function (event) {
        return event.preventDefault();
      });

      var Form =
      /*#__PURE__*/
      function (_Component57) {
        _inheritsLoose(Form, _Component57);

        function Form() {
          return _Component57.apply(this, arguments) || this;
        }

        var _proto57 = Form.prototype;

        _proto57.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onBlur: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      input.value = 'bar';
      expect(callback).not.toHaveBeenCalled(); // rendered once with no onBlur prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onBlur).toBeFalsy();

      _testUtils.default.Simulate.blur(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy();
      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value NOT changed

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].input.value).toBe('');
    });
    it('should allow onFocus callback', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component58) {
        _inheritsLoose(Form, _Component58);

        function Form() {
          return _Component58.apply(this, arguments) || this;
        }

        var _proto58 = Form.prototype;

        _proto58.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onFocus: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      expect(callback).not.toHaveBeenCalled(); // rendered once with no onFocus prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onFocus).toBeFalsy(); // not marked as active

      expect(renderInput.mock.calls[0][0].meta.active).toBe(false);

      _testUtils.default.Simulate.focus(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy(); // event

      expect(callback.mock.calls[0][1]).toBe('foo'); // field marked active

      expect(renderInput).toHaveBeenCalledTimes(2);
      expect(renderInput.mock.calls[1][0].meta.active).toBe(true);
    });
    it('should allow onFocus callback to prevent focus', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn(function (event) {
        return event.preventDefault();
      });

      var Form =
      /*#__PURE__*/
      function (_Component59) {
        _inheritsLoose(Form, _Component59);

        function Form() {
          return _Component59.apply(this, arguments) || this;
        }

        var _proto59 = Form.prototype;

        _proto59.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onFocus: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      expect(callback).not.toHaveBeenCalled(); // rendered once with no onFocus prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onFocus).toBeFalsy(); // not marked as active

      expect(renderInput.mock.calls[0][0].meta.active).toBe(false);

      _testUtils.default.Simulate.focus(input); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy();
      expect(callback.mock.calls[0][1]).toBe('foo'); // field NOT marked active

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].meta.active).toBe(false);
    });
    it('should allow onDrop callback', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component60) {
        _inheritsLoose(Form, _Component60);

        function Form() {
          return _Component60.apply(this, arguments) || this;
        }

        var _proto60 = Form.prototype;

        _proto60.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onDrop: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      expect(callback).not.toHaveBeenCalled(); // rendered once with no onDrop prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onDrop).toBeFalsy();

      _testUtils.default.Simulate.drop(input, {
        dataTransfer: {
          getData: function getData() {
            return 'bar';
          }
        }
      }); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy(); // event

      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value changed

      expect(renderInput).toHaveBeenCalledTimes(2);
      expect(renderInput.mock.calls[1][0].input.value).toBe('bar');
    });
    it('should allow onDrop callback to prevent drop', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn(function (event) {
        return event.preventDefault();
      });

      var Form =
      /*#__PURE__*/
      function (_Component61) {
        _inheritsLoose(Form, _Component61);

        function Form() {
          return _Component61.apply(this, arguments) || this;
        }

        var _proto61 = Form.prototype;

        _proto61.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onDrop: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      input.value = 'bar';
      expect(callback).not.toHaveBeenCalled(); // rendered once with no onDrop prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onDrop).toBeFalsy();

      _testUtils.default.Simulate.drop(input, {
        dataTransfer: {
          getData: function getData() {
            return 'bar';
          }
        }
      }); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy();
      expect(callback.mock.calls[0][1]).toBe('bar');
      expect(callback.mock.calls[0][2]).toBe(undefined);
      expect(callback.mock.calls[0][3]).toBe('foo'); // value NOT changed

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].input.value).toBe('');
    });
    it('should allow onDragStart callback', function () {
      var store = makeStore();
      var renderInput = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var callback = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component62) {
        _inheritsLoose(Form, _Component62);

        function Form() {
          return _Component62.apply(this, arguments) || this;
        }

        var _proto62 = Form.prototype;

        _proto62.render = function render() {
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "foo",
            component: renderInput,
            onDragStart: callback
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var input = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'input');

      expect(callback).not.toHaveBeenCalled(); // rendered once with no onDragStart prop passed down in custom props

      expect(renderInput).toHaveBeenCalledTimes(1);
      expect(renderInput.mock.calls[0][0].onDragStart).toBeFalsy();

      _testUtils.default.Simulate.dragStart(input, {
        dataTransfer: {
          setData: function setData() {}
        }
      }); // call back was called


      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(1);
      expect(callback.mock.calls[0][0]).toBeTruthy(); // event

      expect(callback.mock.calls[0][1]).toBe('foo'); // value NOT changed

      expect(renderInput).toHaveBeenCalledTimes(1);
    });
    it('should strict equals props in immutableProps', function () {
      var store = makeStore();
      var inputRender = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var formRender = jest.fn();

      var Form =
      /*#__PURE__*/
      function (_Component63) {
        _inheritsLoose(Form, _Component63);

        function Form() {
          var _this15;

          _this15 = _Component63.call(this) || this;
          _this15.state = {
            foo: {
              get no() {
                throw new Error('props inside an immutableProps object should not be looked at');
              }

            }
          };
          return _this15;
        }

        var _proto63 = Form.prototype;

        _proto63.render = function render() {
          var _this16 = this;

          formRender(this.props);
          return _react.default.createElement("div", null, _react.default.createElement(Field, {
            name: "input",
            component: inputRender,
            immutableProps: ['foo'],
            foo: this.state.foo
          }), _react.default.createElement("button", {
            onClick: function onClick() {
              return _this16.setState({
                foo: {
                  no: undefined
                }
              });
            }
          }, "Change"));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      expect(formRender).toHaveBeenCalled();
      expect(formRender).toHaveBeenCalledTimes(1);
      expect(inputRender).toHaveBeenCalled();
      expect(inputRender).toHaveBeenCalledTimes(1); // update foo prop

      var button = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'button');

      _testUtils.default.Simulate.click(button);

      expect(formRender).toHaveBeenCalledTimes(2);
      expect(inputRender).toHaveBeenCalledTimes(2);
    });
  });
};

describeField('Field.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeField('Field.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});