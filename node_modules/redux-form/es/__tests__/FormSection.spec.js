"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createField = _interopRequireDefault(require("../createField"));

var _createFields = _interopRequireDefault(require("../createFields"));

var _createFieldArray = _interopRequireDefault(require("../createFieldArray"));

var _FormSection = _interopRequireDefault(require("../FormSection"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var describeFormSection = function describeFormSection(name, structure, combineReducers, setup) {
  var reduxForm = (0, _createReduxForm.default)(structure);
  var Field = (0, _createField.default)(structure);
  var Fields = (0, _createFields.default)(structure);
  var FieldArray = (0, _createFieldArray.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var fromJS = structure.fromJS;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should throw an error if not in ReduxForm', function () {
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement("div", null, _react.default.createElement(_FormSection.default, {
          name: "foo"
        })));
      }).toThrow(/must be inside a component decorated with reduxForm/);
    });
    it('should throw an error if invalid component prop is provided', function () {
      var store = makeStore();
      var notAComponent = {};

      var Form =
      /*#__PURE__*/
      function (_Component) {
        _inheritsLoose(Form, _Component);

        function Form() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Form.prototype;

        _proto.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            component: notAComponent
          });
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);
      expect(function () {
        _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
          store: store
        }, _react.default.createElement(TestForm, null)));
      }).toThrow(/Element type is invalid/);
    });
    it('should not wrap in unnecessary div', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: '42'
            }
          }
        }
      });

      var Form =
      /*#__PURE__*/
      function (_Component2) {
        _inheritsLoose(Form, _Component2);

        function Form() {
          return _Component2.apply(this, arguments) || this;
        }

        var _proto2 = Form.prototype;

        _proto2.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input"
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var divTags = _testUtils.default.scryRenderedDOMComponentsWithTag(dom, 'div');

      expect(divTags.length).toEqual(0);
    });
    it('should pass along unused props to div', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: '42'
            }
          }
        }
      });

      var Form =
      /*#__PURE__*/
      function (_Component3) {
        _inheritsLoose(Form, _Component3);

        function Form() {
          return _Component3.apply(this, arguments) || this;
        }

        var _proto3 = Form.prototype;

        _proto3.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo",
            component: "section",
            className: "form-section",
            style: {
              fontWeight: 'bold'
            }
          }, _react.default.createElement(Field, {
            name: "bar",
            component: "input"
          }), _react.default.createElement(Field, {
            name: "baz",
            component: "input"
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var section = _testUtils.default.findRenderedDOMComponentWithTag(dom, 'section'); // ðŸ¤¢ Is there a better way to get the props on the <section> ??


      var props = section[Object.keys(section)[1]];
      expect(props.name).toBeFalsy();
      expect(props.component).toBeFalsy();
      expect(props.className).toBe('form-section');
      expect(props.style).toBeTruthy();
      expect(props.style.fontWeight).toBe('bold');
    });
    it('should update Field values at the right depth', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: '42'
            }
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component4) {
        _inheritsLoose(Form, _Component4);

        function Form() {
          return _Component4.apply(this, arguments) || this;
        }

        var _proto4 = Form.prototype;

        _proto4.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // input displaying string value


      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('42'); // update value

      input.mock.calls[0][0].input.onChange('15'); // input displaying updated string value

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].input.value).toBe('15');
      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              foo: {
                bar: '15'
              }
            },
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should update Fields values at the right depth', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: '42',
              baz: '100'
            }
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.bar.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component5) {
        _inheritsLoose(Form, _Component5);

        function Form() {
          return _Component5.apply(this, arguments) || this;
        }

        var _proto5 = Form.prototype;

        _proto5.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Fields, {
            names: ['bar', 'baz'],
            component: input
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // input displaying string value


      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].bar.input.value).toBe('42');
      expect(input.mock.calls[0][0].baz.input.value).toBe('100'); // update value

      input.mock.calls[0][0].bar.input.onChange('15'); // input displaying updated string value

      expect(input).toHaveBeenCalledTimes(2);
      expect(input.mock.calls[1][0].bar.input.value).toBe('15');
      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              foo: {
                bar: '15',
                baz: '100'
              }
            },
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'Field',
                count: 1
              },
              'foo.baz': {
                name: 'foo.baz',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should update FieldArray values at the right depth', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: {
              bar: ['dog', 'cat']
            }
          }
        }
      });
      var renderField = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });
      var renderFieldArray = jest.fn(function (_ref) {
        var fields = _ref.fields;
        return _react.default.createElement("div", null, fields.map(function (field) {
          return _react.default.createElement(Field, {
            name: field,
            component: renderField,
            key: field
          });
        }), _react.default.createElement("button", {
          className: "add",
          onClick: function onClick() {
            return fields.push('fish');
          }
        }, "Add Dog"), _react.default.createElement("button", {
          className: "remove",
          onClick: function onClick() {
            return fields.pop();
          }
        }, "Remove Dog"));
      });

      var Form =
      /*#__PURE__*/
      function (_Component6) {
        _inheritsLoose(Form, _Component6);

        function Form() {
          return _Component6.apply(this, arguments) || this;
        }

        var _proto6 = Form.prototype;

        _proto6.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(FieldArray, {
            name: "bar",
            component: renderFieldArray
          }));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      var dom = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null)));

      var addButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'add');

      var removeButton = _testUtils.default.findRenderedDOMComponentWithClass(dom, 'remove');

      _testUtils.default.Simulate.click(addButton);

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              foo: {
                bar: ['dog', 'cat', 'fish']
              }
            },
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'FieldArray',
                count: 1
              },
              'foo.bar[0]': {
                name: 'foo.bar[0]',
                type: 'Field',
                count: 1
              },
              'foo.bar[1]': {
                name: 'foo.bar[1]',
                type: 'Field',
                count: 1
              },
              'foo.bar[2]': {
                name: 'foo.bar[2]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });

      _testUtils.default.Simulate.click(removeButton);

      expect(store.getState()).toEqualMap({
        form: {
          testForm: {
            values: {
              foo: {
                bar: ['dog', 'cat']
              }
            },
            registeredFields: {
              'foo.bar': {
                name: 'foo.bar',
                type: 'FieldArray',
                count: 1
              },
              'foo.bar[0]': {
                name: 'foo.bar[0]',
                type: 'Field',
                count: 1
              },
              'foo.bar[1]': {
                name: 'foo.bar[1]',
                type: 'Field',
                count: 1
              }
            }
          }
        }
      });
    });
    it('should concatenate prefixes when nested', function () {
      var store = makeStore({
        testForm: {
          values: {
            deep: {
              foo: {
                bar: '42'
              }
            }
          }
        }
      });
      var input = jest.fn(function (props) {
        return _react.default.createElement("input", props.input);
      });

      var Form =
      /*#__PURE__*/
      function (_Component7) {
        _inheritsLoose(Form, _Component7);

        function Form() {
          return _Component7.apply(this, arguments) || this;
        }

        var _proto7 = Form.prototype;

        _proto7.render = function render() {
          return _react.default.createElement(_FormSection.default, {
            name: "deep"
          }, _react.default.createElement(_FormSection.default, {
            name: "foo"
          }, _react.default.createElement(Field, {
            name: "bar",
            component: input
          })));
        };

        return Form;
      }(_react.Component);

      var TestForm = reduxForm({
        form: 'testForm'
      })(Form);

      _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(TestForm, null))); // input gets the correct name and value


      expect(input).toHaveBeenCalled();
      expect(input).toHaveBeenCalledTimes(1);
      expect(input.mock.calls[0][0].input.value).toBe('42');
      expect(input.mock.calls[0][0].input.name).toBe('deep.foo.bar');
    });
  });
};

describeFormSection('FormSection.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeFormSection('FormSection.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});