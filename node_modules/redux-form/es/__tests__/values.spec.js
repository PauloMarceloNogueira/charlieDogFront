"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _createValues = _interopRequireDefault(require("../createValues"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var describeValues = function describeValues(name, structure, combineReducers, setup) {
  var values = (0, _createValues.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var fromJS = structure.fromJS;

  var makeStore = function makeStore(initial) {
    return (0, _redux.createStore)(combineReducers({
      form: reducer
    }), fromJS({
      form: initial
    }));
  };

  var testProps = function testProps(state, config) {
    if (config === void 0) {
      config = {};
    }

    var store = makeStore({
      testForm: state
    });
    var spy = jest.fn(function () {
      return _react.default.createElement("div", null);
    });
    var Decorated = values(_extends({
      form: 'testForm'
    }, config))(spy);

    _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(Decorated, null)));

    expect(spy).toHaveBeenCalled();
    return spy.mock.calls[0][0];
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should get values from Redux state', function () {
      var values = {
        cat: 'rat',
        dog: 'cat'
      };
      var props = testProps({
        values: values
      });
      expect(props.values).toEqualMap(values);
    });
    it('should use values prop', function () {
      var values = {
        cat: 'rat',
        dog: 'cat'
      };
      var props = testProps({
        values: values
      }, {
        prop: 'foo'
      });
      expect(props.foo).toEqualMap(values);
    });
  });
};

describeValues('values.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeValues('values.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});