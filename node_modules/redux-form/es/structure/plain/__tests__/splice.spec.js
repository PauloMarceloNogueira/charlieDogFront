"use strict";

var _splice = _interopRequireDefault(require("../splice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.plain.splice', function () {
  var testInsertWithValue = function testInsertWithValue(value) {
    it('should insert even when initial array is undefined', function () {
      // really goes to index 0
      expect((0, _splice.default)(undefined, 2, 0, value)).toEqual([undefined, undefined, value]);
    });
    it("should insert " + value + " at start", function () {
      expect((0, _splice.default)(['b', 'c', 'd'], 0, 0, value)).toEqual([value, 'b', 'c', 'd']);
    });
    it("should insert " + value + " at end", function () {
      expect((0, _splice.default)(['a', 'b', 'c'], 3, 0, value)).toEqual(['a', 'b', 'c', value]);
    });
    it("should insert " + value + " in middle", function () {
      expect((0, _splice.default)(['a', 'b', 'd'], 2, 0, value)).toEqual(['a', 'b', value, 'd']);
    });
    it("should insert " + value + " when index is out of range", function () {
      expect((0, _splice.default)(['a', 'b', 'c'], 5, 0, value)).toEqual(['a', 'b', 'c', undefined, undefined, value]);
    });
  };

  testInsertWithValue('value');
  testInsertWithValue(undefined);
  it('should return empty array when removing and initial array is undefined', function () {
    expect((0, _splice.default)(undefined, 2, 1)).toEqual([]);
  });
  it('should remove at start', function () {
    expect((0, _splice.default)(['a', 'b', 'c', 'd'], 0, 1)).toEqual(['b', 'c', 'd']);
  });
  it('should remove in the middle then insert in that position', function () {
    expect((0, _splice.default)(['a', 'b', 'c', 'd'], 1, 1, 'e')).toEqual(['a', 'e', 'c', 'd']);
  });
  it('should remove at end', function () {
    expect((0, _splice.default)(['a', 'b', 'c', 'd'], 3, 1)).toEqual(['a', 'b', 'c']);
  });
  it('should remove in middle', function () {
    expect((0, _splice.default)(['a', 'b', 'c', 'd'], 2, 1)).toEqual(['a', 'b', 'd']);
  });
});