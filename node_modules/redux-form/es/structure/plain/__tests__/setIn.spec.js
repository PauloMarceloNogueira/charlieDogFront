"use strict";

var _setIn = _interopRequireDefault(require("../setIn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.plain.setIn', function () {
  it('should create a map if state is undefined and key is string', function () {
    expect(typeof (0, _setIn.default)(undefined, 'dog', 'fido')).toBe('object');
    expect((0, _setIn.default)(undefined, 'dog', 'fido')).toEqual({
      dog: 'fido'
    });
  });
  it('should create an array if state is undefined and key is string', function () {
    expect((0, _setIn.default)(undefined, '[0]', 'fido')).toBeInstanceOf(Array);
    expect((0, _setIn.default)(undefined, '[0]', 'fido')).toEqual(['fido']);
    var result = (0, _setIn.default)(undefined, '[1]', 'second');
    expect(result).toBeInstanceOf(Array);
    expect(result.length).toBe(2);
    expect(result[0]).toBe(undefined);
    expect(result[1]).toBe('second');
  });
  it('should handle nested array paths', function () {
    var result = (0, _setIn.default)({}, 'a.b[2][1]', 'success');
    var b = [];
    b[2] = [];
    b[2][1] = 'success';
    expect(result).toEqual({
      a: {
        b: b
      }
    });
  });
  it('should set and shallow keys without mutating state', function () {
    var state = {
      foo: 'bar'
    };
    expect((0, _setIn.default)(state, 'foo', 'baz')).not.toBe(state);
    expect((0, _setIn.default)(state, 'foo', 'baz')).toEqual({
      foo: 'baz'
    });
    expect((0, _setIn.default)(state, 'cat', 'fluffy')).not.toBe(state);
    expect((0, _setIn.default)(state, 'cat', 'fluffy')).toEqual({
      foo: 'bar',
      cat: 'fluffy'
    });
    expect((0, _setIn.default)(state, 'age', 42)).not.toBe(state);
    expect((0, _setIn.default)(state, 'age', 42)).toEqual({
      foo: 'bar',
      age: 42
    });
  });
  it('should set and deep keys without mutating state', function () {
    var state = {
      foo: {
        bar: ['baz', {
          dog: 42
        }]
      }
    };
    var result1 = (0, _setIn.default)(state, 'tv.best.canines[0]', 'scooby');
    expect(result1).not.toBe(state);
    expect(result1).toEqual({
      foo: {
        bar: ['baz', {
          dog: 42
        }]
      },
      tv: {
        best: {
          canines: ['scooby']
        }
      }
    });
    expect(result1.foo).toBe(state.foo);
    var result2 = (0, _setIn.default)(state, 'foo.bar[0]', 'cat');
    expect(result2).not.toBe(state);
    expect(result2).toEqual({
      foo: {
        bar: ['cat', {
          dog: 42
        }]
      }
    });
    expect(result2.foo).not.toBe(state.foo);
    expect(result2.foo.bar).not.toBe(state.foo.bar);
    expect(result2.foo.bar[1]).toBe(state.foo.bar[1]);
    var result3 = (0, _setIn.default)(state, 'foo.bar[1].dog', 7);
    expect(result3).not.toBe(state);
    expect(result3).toEqual({
      foo: {
        bar: ['baz', {
          dog: 7
        }]
      }
    });
    expect(result3.foo).not.toBe(state.foo);
    expect(result3.foo.bar).not.toBe(state.foo.bar);
    expect(result3.foo.bar[0]).toBe(state.foo.bar[0]);
    expect(result3.foo.bar[1]).not.toBe(state.foo.bar[1]);
  });
});