"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = require("react");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _invariant = _interopRequireDefault(require("invariant"));

var _ConnectedFields = _interopRequireDefault(require("./ConnectedFields"));

var _shallowCompare = _interopRequireDefault(require("./util/shallowCompare"));

var _plain = _interopRequireDefault(require("./structure/plain"));

var _prefixName = _interopRequireDefault(require("./util/prefixName"));

var _ReduxFormContext = require("./ReduxFormContext");

var _validateComponentProp = _interopRequireDefault(require("./util/validateComponentProp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var validateNameProp = function validateNameProp(prop) {
  if (!prop) {
    return new Error('No "names" prop was specified <Fields/>');
  }

  if (!Array.isArray(prop) && !prop._isFieldArray) {
    return new Error('Invalid prop "names" supplied to <Fields/>. Must be either an array of strings or the fields array generated by FieldArray.');
  }
};

var createFields = function createFields(structure) {
  var ConnectedFields = (0, _ConnectedFields.default)(structure);

  var Fields =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(Fields, _Component);

    function Fields(props) {
      var _this;

      _this = _Component.call(this, props) || this;

      if (!props._reduxForm) {
        throw new Error('Fields must be inside a component decorated with reduxForm()');
      }

      var error = validateNameProp(props.names);

      if (error) {
        throw error;
      }

      return _this;
    }

    var _proto = Fields.prototype;

    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
      return (0, _shallowCompare.default)(this, nextProps);
    };

    _proto.componentDidMount = function componentDidMount() {
      var props = this.props;
      var register = props._reduxForm.register;
      this.names.forEach(function (name) {
        return register(name, 'Field');
      });
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (!_plain.default.deepEqual(this.props.names, nextProps.names)) {
        var props = this.props;
        var _props$_reduxForm = props._reduxForm,
            register = _props$_reduxForm.register,
            unregister = _props$_reduxForm.unregister; // unregister old name

        this.props.names.forEach(function (name) {
          return unregister((0, _prefixName.default)(props, name));
        }); // register new name

        nextProps.names.forEach(function (name) {
          return register((0, _prefixName.default)(props, name), 'Field');
        });
      }
    };

    _proto.componentWillUnmount = function componentWillUnmount() {
      var props = this.props;
      var unregister = props._reduxForm.unregister;
      this.props.names.forEach(function (name) {
        return unregister((0, _prefixName.default)(props, name));
      });
    };

    _proto.getRenderedComponent = function getRenderedComponent() {
      (0, _invariant.default)(this.props.forwardRef, 'If you want to access getRenderedComponent(), ' + 'you must specify a forwardRef prop to Fields');
      return this.refs.connected.getRenderedComponent();
    };

    _proto.render = function render() {
      var props = this.props;
      return (0, _react.createElement)(ConnectedFields, _extends({}, this.props, {
        names: this.props.names.map(function (name) {
          return (0, _prefixName.default)(props, name);
        }),
        ref: 'connected'
      }));
    };

    _createClass(Fields, [{
      key: "names",
      get: function get() {
        var props = this.props;
        return this.props.names.map(function (name) {
          return (0, _prefixName.default)(props, name);
        });
      }
    }, {
      key: "dirty",
      get: function get() {
        return this.refs.connected.isDirty();
      }
    }, {
      key: "pristine",
      get: function get() {
        return !this.dirty;
      }
    }, {
      key: "values",
      get: function get() {
        return this.refs.connected && this.refs.connected.getValues();
      }
    }]);

    return Fields;
  }(_react.Component);

  Fields.propTypes = {
    names: function names(props, propName) {
      return validateNameProp(props[propName]);
    },
    component: _validateComponentProp.default,
    format: _propTypes.default.func,
    parse: _propTypes.default.func,
    props: _propTypes.default.object,
    forwardRef: _propTypes.default.bool,
    _reduxForm: _propTypes.default.object
  };
  (0, _reactLifecyclesCompat.polyfill)(Fields);
  return (0, _ReduxFormContext.withReduxForm)(Fields);
};

var _default = createFields;
exports.default = _default;