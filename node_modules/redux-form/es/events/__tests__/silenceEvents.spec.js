"use strict";

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _silenceEvents = _interopRequireDefault(require("../silenceEvents"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('silenceEvents', function () {
  it('should return a function', function () {
    expect(typeof (0, _silenceEvents.default)()).toBe('function');
  });
  it('should return pass all args if first arg is not event', function () {
    var spy = jest.fn();
    var silenced = (0, _silenceEvents.default)(spy);
    silenced(1, 2, 3);
    expect(spy).toHaveBeenCalledWith(1, 2, 3);
    spy.mockReset();
    silenced('foo', 'bar');
    expect(spy).toHaveBeenCalledWith('foo', 'bar');
    spy.mockReset();
    silenced({
      value: 10
    }, false);
    expect(spy).toHaveBeenCalledWith({
      value: 10
    }, false);
    spy.mockReset();
  });
  it('should return pass other args if first arg is event', function () {
    var spy = jest.fn();
    var silenced = (0, _silenceEvents.default)(spy);
    var event = {
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default
    };
    silenced(event, 1, 2, 3);
    expect(spy).toHaveBeenCalledWith(1, 2, 3);
    spy.mockReset();
    silenced(event, 'foo', 'bar');
    expect(spy).toHaveBeenCalledWith('foo', 'bar');
    spy.mockReset();
    silenced(event, {
      value: 10
    }, false);
    expect(spy).toHaveBeenCalledWith({
      value: 10
    }, false);
    spy.mockReset();
  });
  it('should silence event', function () {
    var spy = jest.fn();
    var preventDefault = jest.fn();
    var stopPropagation = jest.fn();
    var event = {
      preventDefault: preventDefault,
      stopPropagation: stopPropagation
    };
    (0, _silenceEvents.default)(spy)(event);
    expect(preventDefault).toHaveBeenCalled();
    expect(stopPropagation).not.toHaveBeenCalled();
    expect(spy).toHaveBeenCalled();
  });
});