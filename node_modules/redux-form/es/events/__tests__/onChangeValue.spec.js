"use strict";

var _onChangeValue = _interopRequireDefault(require("../onChangeValue"));

var _eventMocks = require("../../util/eventMocks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = 'sampleField';
describe('onChangeValue', function () {
  it('should parse the value before returning', function () {
    var parse = jest.fn(function (value) {
      return "parsed-" + value;
    });
    var value = (0, _onChangeValue.default)((0, _eventMocks.valueMock)('bar'), {
      name: name,
      parse: parse
    });
    expect(parse).toHaveBeenCalledWith('bar', name);
    expect(value).toBe('parsed-bar');
  });
  it('should normalize the value before returning', function () {
    var normalize = jest.fn(function (_, value) {
      return "normalized-" + value;
    });
    var value = (0, _onChangeValue.default)((0, _eventMocks.valueMock)('bar'), {
      name: name,
      normalize: normalize
    });
    expect(normalize).toHaveBeenCalledWith(name, 'bar');
    expect(value).toBe('normalized-bar');
  });
  it('should parse before normalize', function () {
    var parse = jest.fn(function (value) {
      return "parsed-" + value;
    });
    var normalize = jest.fn(function (_, value) {
      return "normalized-" + value;
    });
    var value = (0, _onChangeValue.default)((0, _eventMocks.valueMock)('bar'), {
      name: name,
      normalize: normalize,
      parse: parse
    });
    expect(parse).toHaveBeenCalledWith('bar', name);
    expect(normalize).toHaveBeenCalled();
    expect(normalize).toHaveBeenCalledWith(name, 'parsed-bar');
    expect(value).toBe('normalized-parsed-bar');
  });
});