"use strict";

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _getValue = _interopRequireDefault(require("../getValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getValue', function () {
  it('should return value if non-event value is passed', function () {
    expect((0, _getValue.default)(undefined, true)).toBe(undefined);
    expect((0, _getValue.default)(undefined, false)).toBe(undefined);
    expect((0, _getValue.default)(null, true)).toBe(null);
    expect((0, _getValue.default)(null, false)).toBe(null);
    expect((0, _getValue.default)(5, true)).toBe(5);
    expect((0, _getValue.default)(5, false)).toBe(5);
    expect((0, _getValue.default)(true, true)).toBe(true);
    expect((0, _getValue.default)(true, false)).toBe(true);
    expect((0, _getValue.default)(false, true)).toBe(false);
    expect((0, _getValue.default)(false, false)).toBe(false);
    expect((0, _getValue.default)('dog', true)).toBe('dog');
    expect((0, _getValue.default)('dog', false)).toBe('dog');
  });
  it('should not unwrap value if non-event object containing value key is passed', function () {
    expect((0, _getValue.default)({
      value: 5
    }, true)).toEqual({
      value: 5
    });
    expect((0, _getValue.default)({
      value: 5
    }, false)).toEqual({
      value: 5
    });
    expect((0, _getValue.default)({
      value: true
    }, true)).toEqual({
      value: true
    });
    expect((0, _getValue.default)({
      value: true
    }, false)).toEqual({
      value: true
    });
    expect((0, _getValue.default)({
      value: false
    }, true)).toEqual({
      value: false
    });
    expect((0, _getValue.default)({
      value: false
    }, false)).toEqual({
      value: false
    });
  });
  it('should return value if object NOT containing value key is passed', function () {
    var foo = {
      bar: 5,
      baz: 8
    };
    expect((0, _getValue.default)(foo)).toBe(foo);
  });
  it('should return event.nativeEvent.text if defined and not react-native', function () {
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      nativeEvent: {
        text: 'foo'
      }
    }, false)).toBe('foo');
  });
  it('should return event.nativeEvent.text if react-native', function () {
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      nativeEvent: {
        text: 'foo'
      }
    }, true)).toBe('foo');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      nativeEvent: {
        text: undefined
      }
    }, true)).toBe(undefined);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      nativeEvent: {
        text: null
      }
    }, true)).toBe(null);
  });
  it('should return event.target.checked if checkbox', function () {
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'checkbox',
        checked: true
      }
    }, true)).toBe(true);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'checkbox',
        checked: true
      }
    }, false)).toBe(true);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'checkbox',
        checked: undefined
      }
    }, true)).toBe(false);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'checkbox',
        checked: undefined
      }
    }, false)).toBe(false);
  });
  it('should return a number type for numeric inputs, when a value is set', function () {
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'number',
        value: '3.1415'
      }
    }, true)).toBe('3.1415');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'range',
        value: '2.71828'
      }
    }, true)).toBe('2.71828');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'number',
        value: '3'
      }
    }, false)).toBe('3');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'range',
        value: '3.1415'
      }
    }, false)).toBe('3.1415');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'range',
        value: ''
      }
    }, false)).toBe('');
  });
  it('should return event.target.files if file', function () {
    var myFiles = ['foo', 'bar'];
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'file',
        files: myFiles
      }
    }, true)).toBe(myFiles);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'file',
        files: myFiles
      }
    }, false)).toBe(myFiles);
  });
  it('should return event.dataTransfer.files if file and files not in target.files', function () {
    var myFiles = ['foo', 'bar'];
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'file'
      },
      dataTransfer: {
        files: myFiles
      }
    }, true)).toBe(myFiles);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'file'
      },
      dataTransfer: {
        files: myFiles
      }
    }, false)).toBe(myFiles);
  });
  it('should return selected options if is a multiselect', function () {
    var options = [{
      selected: true,
      value: 'foo'
    }, {
      selected: true,
      value: 'bar'
    }, {
      selected: false,
      value: 'baz'
    }];
    var expected = options.filter(function (option) {
      return option.selected;
    }).map(function (option) {
      return option.value;
    });
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'select-multiple',
        options: options
      }
    }, true)).toEqual(expected);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'select-multiple'
      }
    }, false)).toEqual([]); // no options specified

    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        type: 'select-multiple',
        options: options
      }
    }, false)).toEqual(expected);
  });
  it('should return event.target.value if not file or checkbox', function () {
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: undefined
      }
    }, true)).toBe(undefined);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: undefined
      }
    }, false)).toBe(undefined);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: null
      }
    }, true)).toBe(null);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: null
      }
    }, false)).toBe(null);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: true
      }
    }, true)).toBe(true);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: true
      }
    }, false)).toBe(true);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: false
      }
    }, true)).toBe(false);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: false
      }
    }, false)).toBe(false);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: 42
      }
    }, true)).toBe(42);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: 42
      }
    }, false)).toBe(42);
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: 'foo'
      }
    }, true)).toBe('foo');
    expect((0, _getValue.default)({
      preventDefault: _noop2.default,
      stopPropagation: _noop2.default,
      target: {
        value: 'foo'
      }
    }, false)).toBe('foo');
  });
});