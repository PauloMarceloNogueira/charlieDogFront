"use strict";

var _isDirty = _interopRequireDefault(require("../isDirty"));

var _plain = _interopRequireDefault(require("../../structure/plain"));

var _expectations = _interopRequireDefault(require("../../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeIsDirty = function describeIsDirty(name, structure, setup) {
  var isDirty = (0, _isDirty.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should return a function', function () {
      expect(typeof isDirty('foo')).toBe('function');
    });
    it('should return false when values not present', function () {
      expect(isDirty('foo')(fromJS({
        form: {}
      }))).toBe(false);
    });
    it('should return false when values are pristine', function () {
      expect(isDirty('foo')(fromJS({
        form: {
          foo: {
            initial: {
              dog: 'Snoopy',
              cat: 'Garfield'
            },
            values: {
              dog: 'Snoopy',
              cat: 'Garfield'
            }
          }
        }
      }))).toBe(false);
    });
    it('should return true when values are dirty', function () {
      expect(isDirty('foo')(fromJS({
        form: {
          foo: {
            initial: {
              dog: 'Snoopy',
              cat: 'Garfield'
            },
            values: {
              dog: 'Odie',
              cat: 'Garfield'
            }
          }
        }
      }))).toBe(true);
    });
    it('should use getFormState if provided', function () {
      expect(isDirty('foo', function (state) {
        return getIn(state, 'someOtherSlice');
      })(fromJS({
        someOtherSlice: {
          foo: {
            initial: {
              dog: 'Snoopy',
              cat: 'Garfield'
            },
            values: {
              dog: 'Odie',
              cat: 'Garfield'
            }
          }
        }
      }))).toBe(true);
    });
    it('should return false if specified fields pristine', function () {
      expect(isDirty('foo')(fromJS({
        form: {
          foo: {
            initial: {
              dog: 'Snoopy',
              cat: 'Garfield'
            },
            values: {
              dog: 'Odie',
              cat: 'Garfield'
            }
          }
        }
      }), 'cat')).toBe(false);
    });
    it('should return true if specified fields dirty', function () {
      expect(isDirty('foo')(fromJS({
        form: {
          foo: {
            initial: {
              dog: 'Snoopy',
              cat: 'Garfield'
            },
            values: {
              dog: 'Odie',
              cat: 'Garfield'
            }
          }
        }
      }), 'cat', 'dog')).toBe(true);
    });
  });
};

describeIsDirty('isDirty.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeIsDirty('isDirty.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});