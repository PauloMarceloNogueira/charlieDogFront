"use strict";

var _getFormError = _interopRequireDefault(require("../getFormError"));

var _plain = _interopRequireDefault(require("../../structure/plain"));

var _expectations = _interopRequireDefault(require("../../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeGetFormError = function describeGetFormError(name, structure, setup) {
  var getFormError = (0, _getFormError.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should return a function', function () {
      expect(typeof getFormError('foo')).toBe('function');
    });
    it('should return error when it is presented', function () {
      expect(getFormError('foo')(fromJS({
        form: {
          foo: {
            error: 'Wow'
          }
        }
      }))).toBe('Wow');
    });
    it('should return undefined when it is not presented', function () {
      expect(getFormError('foo')(fromJS({
        form: {}
      }))).toBe(undefined);
    });
    it('should use getFormState if provided', function () {
      expect(getFormError('foo', function (state) {
        return getIn(state, 'someOtherSlice');
      })(fromJS({
        someOtherSlice: {
          foo: {
            error: 'Wow'
          }
        }
      }))).toBe('Wow');
    });
  });
};

describeGetFormError('getFormError.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeGetFormError('getFormError.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});