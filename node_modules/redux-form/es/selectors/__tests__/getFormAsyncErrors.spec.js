"use strict";

var _getFormAsyncErrors = _interopRequireDefault(require("../getFormAsyncErrors"));

var _plain = _interopRequireDefault(require("../../structure/plain"));

var _expectations = _interopRequireDefault(require("../../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeGetFormAsyncErrors = function describeGetFormAsyncErrors(name, structure, setup) {
  var getFormAsyncErrors = (0, _getFormAsyncErrors.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should return a function', function () {
      expect(typeof (0, _getFormAsyncErrors.default)('foo')).toBe('function');
    });
    it('should get the form values from state', function () {
      expect(getFormAsyncErrors('foo')(fromJS({
        form: {
          foo: {
            asyncErrors: {
              dog: 'Snoopy',
              cat: 'Garfield'
            }
          }
        }
      }))).toEqualMap({
        dog: 'Snoopy',
        cat: 'Garfield'
      });
    });
    it('should return undefined if there are no asyncErrors', function () {
      expect(getFormAsyncErrors('foo')(fromJS({
        form: {
          foo: {}
        }
      }))).toEqual(undefined);
    });
    it('should use getFormState if provided', function () {
      expect(getFormAsyncErrors('foo', function (state) {
        return getIn(state, 'someOtherSlice');
      })(fromJS({
        someOtherSlice: {
          foo: {
            asyncErrors: {
              dog: 'Snoopy',
              cat: 'Garfield'
            }
          }
        }
      }))).toEqualMap({
        dog: 'Snoopy',
        cat: 'Garfield'
      });
    });
  });
};

describeGetFormAsyncErrors('getFormAsyncErrors.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeGetFormAsyncErrors('getFormAsyncErrors.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});