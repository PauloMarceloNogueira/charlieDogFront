"use strict";

var _isSubmitting = _interopRequireDefault(require("../isSubmitting"));

var _plain = _interopRequireDefault(require("../../structure/plain"));

var _expectations = _interopRequireDefault(require("../../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeIsSubmitting = function describeIsSubmitting(name, structure, setup) {
  var isSubmitting = (0, _isSubmitting.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should return a function XXX', function () {
      expect(typeof isSubmitting('foo')).toBe('function');
    });
    it('should return false when value not present', function () {
      expect(isSubmitting('foo')(fromJS({
        form: {}
      }))).toBe(false);
    });
    it('should return true when submitting', function () {
      expect(isSubmitting('foo')(fromJS({
        form: {
          foo: {
            submitting: true
          }
        }
      }))).toBe(true);
    });
    it('should use getFormState if provided', function () {
      expect(isSubmitting('foo', function (state) {
        return getIn(state, 'someOtherSlice');
      })(fromJS({
        someOtherSlice: {
          foo: {
            submitting: true
          }
        }
      }))).toBe(true);
    });
  });
};

describeIsSubmitting('isSubmitting.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeIsSubmitting('isSubmitting.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});