"use strict";

var _getFormSubmitErrors = _interopRequireDefault(require("../getFormSubmitErrors"));

var _plain = _interopRequireDefault(require("../../structure/plain"));

var _expectations = _interopRequireDefault(require("../../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeGetFormSubmitErrors = function describeGetFormSubmitErrors(name, structure, setup) {
  var getFormSubmitErrors = (0, _getFormSubmitErrors.default)(structure);
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should return a function', function () {
      expect(typeof (0, _getFormSubmitErrors.default)('foo')).toBe('function');
    });
    it('should get the form values from state', function () {
      expect(getFormSubmitErrors('foo')(fromJS({
        form: {
          foo: {
            submitErrors: {
              dog: 'Snoopy',
              cat: 'Garfield'
            }
          }
        }
      }))).toEqualMap({
        dog: 'Snoopy',
        cat: 'Garfield'
      });
    });
    it('should return object if there are no submitErrors', function () {
      expect(getFormSubmitErrors('foo')(fromJS({
        form: {
          foo: {}
        }
      }))).toEqual(fromJS({}));
    });
    it('should use getFormState if provided', function () {
      expect(getFormSubmitErrors('foo', function (state) {
        return getIn(state, 'someOtherSlice');
      })(fromJS({
        someOtherSlice: {
          foo: {
            submitErrors: {
              dog: 'Snoopy',
              cat: 'Garfield'
            }
          }
        }
      }))).toEqualMap({
        dog: 'Snoopy',
        cat: 'Garfield'
      });
    });
  });
};

describeGetFormSubmitErrors('getFormSubmitErrors.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeGetFormSubmitErrors('getFormSubmitErrors.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});