"use strict";

var mocks = _interopRequireWildcard(require("../eventMocks"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

describe('#eventMocks', function () {
  it('should create a mock with identity functions', function () {
    var event = mocks.valueMock('value');
    expect(typeof event.preventDefault).toBe('function');
    expect(typeof event.stopPropagation).toBe('function');
    expect(event.preventDefault('id')).toEqual('id');
    expect(event.stopPropagation('id')).toEqual('id');
  });
  it('should create a value mock', function () {
    var event = mocks.valueMock('value');
    expect(event.target.value).toEqual('value');
  });
  it('should create a drag start mock', function () {
    var fn = function fn(id) {
      return id;
    };

    var event = mocks.dragStartMock(fn);
    expect(event.dataTransfer.setData).toBe(fn);
  });
  it('should create a drop mock', function () {
    var fn = function fn(id) {
      return id;
    };

    var event = mocks.dropMock(fn);
    expect(event.dataTransfer.getData).toBe(fn);
  });
});