"use strict";

var _deleteInWithCleanUp = _interopRequireDefault(require("../deleteInWithCleanUp"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describeDeleteInWithCleanUp = function describeDeleteInWithCleanUp(name, structure, setup) {
  var fromJS = structure.fromJS;
  var deleteInWithCleanUp = (0, _deleteInWithCleanUp.default)(structure)();
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should delete from a flat structure', function () {
      expect(deleteInWithCleanUp(fromJS({
        dog: 'Scooby',
        cat: 'Garfield'
      }), 'dog')).toEqualMap({
        cat: 'Garfield'
      });
    });
    it('should not delete parent if has other children', function () {
      expect(deleteInWithCleanUp(fromJS({
        a: {
          b: 1,
          c: 2
        },
        d: {
          e: 3
        }
      }), 'a.b')).toEqualMap({
        a: {
          c: 2
        },
        d: {
          e: 3
        }
      });
    });
    it('should just set to undefined if leaf structure is an array', function () {
      expect(deleteInWithCleanUp(fromJS({
        a: [42]
      }), 'a[0]')).toEqualMap({
        a: [undefined]
      });
      expect(deleteInWithCleanUp(fromJS({
        a: [42]
      }), 'b[0]')).toEqualMap({
        a: [42]
      });
      expect(deleteInWithCleanUp(fromJS({
        a: [41, 42, 43]
      }), 'a[1]')).toEqualMap({
        a: [41, undefined, 43]
      });
      expect(deleteInWithCleanUp(fromJS({
        a: {
          b: 1,
          c: [2]
        },
        d: {
          e: 3
        }
      }), 'a.c[0]')).toEqualMap({
        a: {
          b: 1,
          c: [undefined]
        },
        d: {
          e: 3
        }
      });
    });
    it('should delete parent if no other children', function () {
      expect(deleteInWithCleanUp(fromJS({
        a: {
          b: 1,
          c: 2
        },
        d: {
          e: 3
        }
      }), 'd.e')).toEqualMap({
        a: {
          b: 1,
          c: 2
        }
      });
      expect(deleteInWithCleanUp(fromJS({
        a: {
          b: {
            c: {
              d: {
                e: {
                  f: "That's DEEP!"
                }
              }
            }
          }
        }
      }), 'a.b.c.d.e.f')).toEqualMap({});
    });
    it('should only delete cats because I am a dog person', function () {
      var validation = function validation(structure) {
        return function (state, path) {
          return path.startsWith('cat');
        };
      };

      var deleteInSpecial = (0, _deleteInWithCleanUp.default)(structure)(validation);
      expect(deleteInSpecial(fromJS({
        dog: 'Scooby',
        cat: 'Garfield'
      }), 'dog')).toEqualMap({
        dog: 'Scooby',
        cat: 'Garfield'
      });
      expect(deleteInSpecial(fromJS({
        dog: 'Scooby',
        cat: 'Garfield'
      }), 'cat')).toEqualMap({
        dog: 'Scooby'
      });
    });
  });
};

describeDeleteInWithCleanUp('deleteInWithCleanUp.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeDeleteInWithCleanUp('deleteInWithCleanUp.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});