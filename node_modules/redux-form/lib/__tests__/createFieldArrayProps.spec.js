"use strict";

var _createFieldArrayProps = _interopRequireDefault(require("../createFieldArrayProps"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var describeCreateFieldProps = function describeCreateFieldProps(name, structure, setup) {
  var fromJS = structure.fromJS,
      getIn = structure.getIn;
  var defaultParams = [structure, 'foo', 'testForm', undefined, function () {
    return 69;
  }];
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should pass props through', function () {
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        otherProp: 'hello'
      }])).otherProp).toBe('hello');
    });
    it('should pass props through using props prop', function () {
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        props: {
          otherProp: 'hello'
        }
      }])).otherProp).toBe('hello');
    });
    it('should pass dirty/pristine through', function () {
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        dirty: false,
        pristine: true
      }])).meta.dirty).toBe(false);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        dirty: false,
        pristine: true
      }])).meta.pristine).toBe(true);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        dirty: true,
        pristine: false
      }])).meta.dirty).toBe(true);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        dirty: true,
        pristine: false
      }])).meta.pristine).toBe(false);
    });
    it('should provide length', function () {
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS([]),
        length: 0
      }])).fields.length).toBe(0);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a']),
        length: 1
      }])).fields.length).toBe(1);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        length: 2
      }])).fields.length).toBe(2);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        length: 3
      }])).fields.length).toBe(3);
    });
    it('should provide errors', function () {
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        syncError: 'Sync Error'
      }])).meta.error).toBe('Sync Error');
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        syncError: 'Sync Error'
      }])).meta.valid).toBe(false);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        syncError: 'Sync Error'
      }])).meta.invalid).toBe(true);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        syncWarning: 'Sync Warning'
      }])).meta.warning).toBe('Sync Warning');
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        asyncError: 'Async Error'
      }])).meta.error).toBe('Async Error');
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        asyncError: 'Async Error'
      }])).meta.valid).toBe(false);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        asyncError: 'Async Error'
      }])).meta.invalid).toBe(true);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        submitError: 'Submit Error'
      }])).meta.error).toBe('Submit Error');
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        submitError: 'Submit Error'
      }])).meta.valid).toBe(false);
      expect(_createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        submitError: 'Submit Error'
      }])).meta.invalid).toBe(true);
    });
    it('should provide move', function () {
      var arrayMove = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        arrayMove: arrayMove
      }]));

      expect(typeof result.fields.move).toBe('function');
      expect(arrayMove).not.toHaveBeenCalled();
      expect(result.fields.move(0, 2)).toBeFalsy();
      expect(arrayMove).toHaveBeenCalledWith(0, 2);
    });
    it('should provide push', function () {
      var arrayPush = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        arrayPush: arrayPush
      }]));

      expect(typeof result.fields.push).toBe('function');
      expect(arrayPush).not.toHaveBeenCalled();
      expect(result.fields.push('c')).toBeFalsy();
      expect(arrayPush).toHaveBeenCalledWith('c');
    });
    it('should provide pop', function () {
      var arrayPop = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        length: 3,
        arrayPop: arrayPop
      }]));

      expect(typeof result.fields.pop).toBe('function');
      expect(arrayPop).not.toHaveBeenCalled();
      expect(result.fields.pop()).toBe('c');
      expect(arrayPop).toHaveBeenCalledWith();
    });
    it('should provide insert', function () {
      var arrayInsert = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        arrayInsert: arrayInsert
      }]));

      expect(typeof result.fields.insert).toBe('function');
      expect(arrayInsert).not.toHaveBeenCalled();
      expect(result.fields.insert(1, 'c')).toBeFalsy();
      expect(arrayInsert).toHaveBeenCalledWith(1, 'c');
    });
    it('should provide remove', function () {
      var arrayRemove = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        arrayRemove: arrayRemove
      }]));

      expect(typeof result.fields.remove).toBe('function');
      expect(arrayRemove).not.toHaveBeenCalled();
      expect(result.fields.remove(2)).toBeFalsy();
      expect(arrayRemove).toHaveBeenCalledWith(2);
    });
    it('should provide removeAll', function () {
      var arrayRemoveAll = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        arrayRemoveAll: arrayRemoveAll
      }]));

      expect(typeof result.fields.removeAll).toBe('function');
      expect(arrayRemoveAll).not.toHaveBeenCalled();
      expect(result.fields.removeAll()).toBeFalsy();
      expect(arrayRemoveAll).toHaveBeenCalledWith();
    });
    it('should provide unshift', function () {
      var arrayUnshift = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b']),
        arrayUnshift: arrayUnshift
      }]));

      expect(typeof result.fields.unshift).toBe('function');
      expect(arrayUnshift).not.toHaveBeenCalled();
      expect(result.fields.unshift('c')).toBeFalsy();
      expect(arrayUnshift).toHaveBeenCalledWith('c');
    });
    it('should provide shift', function () {
      var arrayShift = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        arrayShift: arrayShift
      }]));

      expect(typeof result.fields.shift).toBe('function');
      expect(arrayShift).not.toHaveBeenCalled();
      expect(result.fields.shift()).toBe('a');
      expect(arrayShift).toHaveBeenCalledWith();
    });
    it('should provide forEach', function () {
      var callback = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c'])
      }]));

      expect(typeof result.fields.forEach).toBe('function');
      expect(callback).not.toHaveBeenCalled();
      result.fields.forEach(callback);
      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(3);
      expect(callback.mock.calls[0]).toEqual(['foo[0]', 0, result.fields]);
      expect(callback.mock.calls[1]).toEqual(['foo[1]', 1, result.fields]);
      expect(callback.mock.calls[2]).toEqual(['foo[2]', 2, result.fields]);
    });
    it('should provide get that uses passed in getValue', function () {
      var value = fromJS(['a', 'b', 'c']);

      var getValue = function getValue(index) {
        return value && getIn(value, index) + 'DOG';
      };

      var result = (0, _createFieldArrayProps.default)(getIn, 'foo', 'testForm', undefined, getValue, {
        value: value
      });
      expect(typeof result.fields.get).toBe('function');
      expect(result.fields.get(0)).toBe('aDOG');
      expect(result.fields.get(1)).toBe('bDOG');
      expect(result.fields.get(2)).toBe('cDOG');
    });
    it('should provide getAll', function () {
      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c'])
      }]));

      expect(typeof result.fields.getAll).toBe('function');
      expect(result.fields.getAll()).toEqualMap(['a', 'b', 'c']);
    });
    it('should provide map', function () {
      var callback = jest.fn(function (name) {
        return {
          whatever: true,
          name: name
        };
      });

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        length: 3
      }]));

      expect(typeof result.fields.map).toBe('function');
      expect(callback).not.toHaveBeenCalled();
      var mapResult = result.fields.map(callback);
      expect(getIn(mapResult, 0)).toEqual({
        whatever: true,
        name: 'foo[0]'
      });
      expect(getIn(mapResult, 1)).toEqual({
        whatever: true,
        name: 'foo[1]'
      });
      expect(getIn(mapResult, 2)).toEqual({
        whatever: true,
        name: 'foo[2]'
      });
      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(3);
      expect(callback.mock.calls[0]).toEqual(['foo[0]', 0, result.fields]);
      expect(callback.mock.calls[1]).toEqual(['foo[1]', 1, result.fields]);
      expect(callback.mock.calls[2]).toEqual(['foo[2]', 2, result.fields]);
    });
    it('should provide reduce', function () {
      var callback = jest.fn(function (accumulator, name) {
        var _extends2;

        return _extends({}, accumulator, (_extends2 = {}, _extends2[name] = {
          whatever: true,
          name: name
        }, _extends2));
      });

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c']),
        length: 3
      }]));

      expect(typeof result.fields.reduce).toBe('function');
      expect(callback).not.toHaveBeenCalled();
      var reduceResult = result.fields.reduce(callback, {});
      expect(reduceResult['foo[0]']).toEqual({
        whatever: true,
        name: 'foo[0]'
      });
      expect(reduceResult['foo[1]']).toEqual({
        whatever: true,
        name: 'foo[1]'
      });
      expect(reduceResult['foo[2]']).toEqual({
        whatever: true,
        name: 'foo[2]'
      });
      expect(callback).toHaveBeenCalled();
      expect(callback).toHaveBeenCalledTimes(3);
      expect(callback.mock.calls[0]).toEqual([{}, 'foo[0]', 0, result.fields]);
      expect(callback.mock.calls[1]).toEqual([{
        'foo[0]': {
          whatever: true,
          name: 'foo[0]'
        }
      }, 'foo[1]', 1, result.fields]);
      expect(callback.mock.calls[2]).toEqual([{
        'foo[0]': {
          whatever: true,
          name: 'foo[0]'
        },
        'foo[1]': {
          whatever: true,
          name: 'foo[1]'
        }
      }, 'foo[2]', 2, result.fields]);
    });
    it('should provide reduce when no value', function () {
      var callback = jest.fn(function (accumulator, name) {
        var _extends3;

        return _extends({}, accumulator, (_extends3 = {}, _extends3[name] = {
          whatever: true,
          name: name
        }, _extends3));
      });

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{}]));

      expect(typeof result.fields.reduce).toBe('function');
      expect(callback).not.toHaveBeenCalled();
      result.fields.reduce(callback, {});
      expect(callback).not.toHaveBeenCalled();
    });
    it('should provide swap', function () {
      var arraySwap = jest.fn();

      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        arraySwap: arraySwap,
        value: fromJS(['a', 'b', 'c'])
      }]));

      expect(typeof result.fields.swap).toBe('function');
      expect(arraySwap).not.toHaveBeenCalled();
      expect(result.fields.swap(0, 2)).toBeFalsy();
      expect(arraySwap).toHaveBeenCalledWith(0, 2);
    });
    it('should provide a _isFieldArray meta prop', function () {
      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c'])
      }]));

      expect(result.fields._isFieldArray).toBe(true);
    });
    it('should pass name through to the fields prop', function () {
      var result = _createFieldArrayProps.default.apply(void 0, defaultParams.concat([{
        value: fromJS(['a', 'b', 'c'])
      }]));

      expect(result.fields.name).toBe('foo');
    });
  });
};

describeCreateFieldProps('createFieldArrayProps.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeCreateFieldProps('createFieldArrayProps.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});