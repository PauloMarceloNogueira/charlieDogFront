"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxImmutablejs = require("redux-immutablejs");

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _createReduxForm = _interopRequireDefault(require("../createReduxForm"));

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _FormName = _interopRequireDefault(require("../FormName"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var describeFormName = function describeFormName(name, structure, combineReducers, setup) {
  var reduxForm = (0, _createReduxForm.default)(structure);
  var reducer = (0, _createReducer.default)(structure);
  var fromJS = structure.fromJS;

  var makeStore = function makeStore(initial, logger) {
    if (initial === void 0) {
      initial = {};
    }

    var reducers = {
      form: reducer
    };

    if (logger) {
      reducers.logger = logger;
    }

    return (0, _redux.createStore)(combineReducers(reducers), fromJS({
      form: initial
    }));
  };

  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should pass name to child function and render what it returns', function () {
      var store = makeStore({
        testForm: {
          values: {
            foo: 42
          }
        }
      });

      var TestForm =
      /*#__PURE__*/
      function (_Component) {
        _inheritsLoose(TestForm, _Component);

        function TestForm() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TestForm.prototype;

        _proto.render = function render() {
          return _react.default.createElement("form", null, _react.default.createElement(_FormName.default, null, function (_ref) {
            var form = _ref.form;
            return _react.default.createElement("h1", null, "Form name: ", form);
          }));
        };

        return TestForm;
      }(_react.Component);

      var DecoratedTestForm = reduxForm({
        form: 'testForm'
      })(TestForm);

      var comp = _testUtils.default.renderIntoDocument(_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(DecoratedTestForm, null)));

      expect((0, _reactDom.findDOMNode)(comp).outerHTML).toBe('<form><h1>Form name: testForm</h1></form>');
    });
  });
};

describeFormName('FormName.plain', _plain.default, _redux.combineReducers, function () {
  return expect.extend(_expectations.default);
});
describeFormName('FormName.immutable', _immutable.default, _reduxImmutablejs.combineReducers, function () {
  return expect.extend(_expectations2.default);
});