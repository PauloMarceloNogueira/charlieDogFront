"use strict";

var _createReducer = _interopRequireDefault(require("../createReducer"));

var _plain = _interopRequireDefault(require("../structure/plain"));

var _expectations = _interopRequireDefault(require("../structure/plain/__tests__/expectations"));

var _immutable = _interopRequireDefault(require("../structure/immutable"));

var _expectations2 = _interopRequireDefault(require("../structure/immutable/__tests__/expectations"));

var _actionTypes = require("../actionTypes");

var _reducer = _interopRequireDefault(require("./helpers/reducer.initialize"));

var _reducer2 = _interopRequireDefault(require("./helpers/reducer.arrayInsert"));

var _reducer3 = _interopRequireDefault(require("./helpers/reducer.arrayMove"));

var _reducer4 = _interopRequireDefault(require("./helpers/reducer.arrayPop"));

var _reducer5 = _interopRequireDefault(require("./helpers/reducer.arrayPush"));

var _reducer6 = _interopRequireDefault(require("./helpers/reducer.arrayRemove"));

var _reducer7 = _interopRequireDefault(require("./helpers/reducer.arrayRemoveAll"));

var _reducer8 = _interopRequireDefault(require("./helpers/reducer.arrayShift"));

var _reducer9 = _interopRequireDefault(require("./helpers/reducer.arraySplice"));

var _reducer10 = _interopRequireDefault(require("./helpers/reducer.arraySwap"));

var _reducer11 = _interopRequireDefault(require("./helpers/reducer.arrayUnshift"));

var _reducer12 = _interopRequireDefault(require("./helpers/reducer.autofill"));

var _reducer13 = _interopRequireDefault(require("./helpers/reducer.blur"));

var _reducer14 = _interopRequireDefault(require("./helpers/reducer.change"));

var _reducer15 = _interopRequireDefault(require("./helpers/reducer.clearSubmit"));

var _reducer16 = _interopRequireDefault(require("./helpers/reducer.clearSubmitErrors"));

var _reducer17 = _interopRequireDefault(require("./helpers/reducer.clearAsyncError"));

var _reducer18 = _interopRequireDefault(require("./helpers/reducer.clearFields"));

var _reducer19 = _interopRequireDefault(require("./helpers/reducer.destroy"));

var _reducer20 = _interopRequireDefault(require("./helpers/reducer.focus"));

var _reducer21 = _interopRequireDefault(require("./helpers/reducer.touch"));

var _reducer22 = _interopRequireDefault(require("./helpers/reducer.reset"));

var _reducer23 = _interopRequireDefault(require("./helpers/reducer.resetSection"));

var _reducer24 = _interopRequireDefault(require("./helpers/reducer.plugin"));

var _reducer25 = _interopRequireDefault(require("./helpers/reducer.startSubmit"));

var _reducer26 = _interopRequireDefault(require("./helpers/reducer.stopSubmit"));

var _reducer27 = _interopRequireDefault(require("./helpers/reducer.setSubmitFailed"));

var _reducer28 = _interopRequireDefault(require("./helpers/reducer.setSubmitSuceeded"));

var _reducer29 = _interopRequireDefault(require("./helpers/reducer.startAsyncValidation"));

var _reducer30 = _interopRequireDefault(require("./helpers/reducer.stopAsyncValidation"));

var _reducer31 = _interopRequireDefault(require("./helpers/reducer.submit"));

var _reducer32 = _interopRequireDefault(require("./helpers/reducer.registerField"));

var _reducer33 = _interopRequireDefault(require("./helpers/reducer.unregisterField"));

var _reducer34 = _interopRequireDefault(require("./helpers/reducer.untouch"));

var _reducer35 = _interopRequireDefault(require("./helpers/reducer.updateSyncErrors"));

var _reducer36 = _interopRequireDefault(require("./helpers/reducer.updateSyncWarnings"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tests = {
  initialize: _reducer.default,
  arrayInsert: _reducer2.default,
  arrayMove: _reducer3.default,
  arrayPop: _reducer4.default,
  arrayPush: _reducer5.default,
  arrayRemove: _reducer6.default,
  arrayRemoveAll: _reducer7.default,
  arrayShift: _reducer8.default,
  arraySplice: _reducer9.default,
  arraySwap: _reducer10.default,
  arrayUnshift: _reducer11.default,
  autofill: _reducer12.default,
  blur: _reducer13.default,
  change: _reducer14.default,
  clearSubmit: _reducer15.default,
  clearSubmitErrors: _reducer16.default,
  clearAsyncError: _reducer17.default,
  clearFields: _reducer18.default,
  destroy: _reducer19.default,
  focus: _reducer20.default,
  reset: _reducer22.default,
  resetSection: _reducer23.default,
  touch: _reducer21.default,
  setSubmitFailed: _reducer27.default,
  setSubmitSucceeded: _reducer28.default,
  startSubmit: _reducer25.default,
  stopSubmit: _reducer26.default,
  startAsyncValidation: _reducer29.default,
  stopAsyncValidation: _reducer30.default,
  submit: _reducer31.default,
  registerField: _reducer32.default,
  unregisterField: _reducer33.default,
  untouch: _reducer34.default,
  updateSyncErrors: _reducer35.default,
  updateSyncWarnings: _reducer36.default,
  plugin: _reducer24.default
};

var describeReducer = function describeReducer(name, structure, setup) {
  var reducer = (0, _createReducer.default)(structure);
  describe(name, function () {
    beforeAll(function () {
      setup();
    });
    it('should initialize state to {}', function () {
      var state = reducer();
      expect(state).toBeAMap();
      expect(state).toBeSize(0);
    });
    it('should not modify state when action has no form', function () {
      var state = {
        foo: 'bar'
      };
      expect(reducer(state, {
        type: 'SOMETHING_ELSE'
      })).toBe(state);
    });
    it('should not modify state when action has form, but unknown type', function () {
      var state = {
        foo: 'bar'
      };
      expect(reducer(state, {
        type: 'SOMETHING_ELSE',
        form: 'foo'
      })).toBe(state);
    });
    it('should initialize form state when action has form', function () {
      var state = reducer(undefined, {
        type: _actionTypes.prefix + "SOME_ACTION",
        meta: {
          form: 'foo'
        }
      });
      expect(state).toBeAMap();
      expect(state).toBeSize(1);
      expect(state).toEqualMap({
        foo: {}
      });
    });
    it('should ignore non-redux-form actions', function () {
      var state = reducer(undefined, {
        type: 'some/other/lib',
        meta: {
          form: 'foo'
        }
      });
      expect(state).toEqualMap({});
    });
    Object.keys(tests).forEach(function (key) {
      describe(name + "." + key, tests[key](reducer, expect, structure));
    });
  });
};

describeReducer('reducer.plain', _plain.default, function () {
  return expect.extend(_expectations.default);
});
describeReducer('reducer.immutable', _immutable.default, function () {
  return expect.extend(_expectations2.default);
});