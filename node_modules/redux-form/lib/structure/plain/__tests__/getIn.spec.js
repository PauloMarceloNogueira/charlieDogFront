"use strict";

var _getIn = _interopRequireDefault(require("../getIn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.plain.getIn', function () {
  it('should return undefined if state is undefined', function () {
    expect((0, _getIn.default)(undefined, 'dog')).toBe(undefined);
  });
  it('should return undefined if any step on the path is undefined', function () {
    expect((0, _getIn.default)({
      a: {
        b: {}
      }
    }, 'a.b.c')).toBe(undefined);
  });
  it('should get shallow values', function () {
    expect((0, _getIn.default)({
      foo: 'bar'
    }, 'foo')).toBe('bar');
    expect((0, _getIn.default)({
      foo: 42
    }, 'foo')).toBe(42);
    expect((0, _getIn.default)({
      foo: false
    }, 'foo')).toBe(false);
  });
  it('should get deep values', function () {
    var state = {
      foo: {
        bar: ['baz', {
          dog: 42
        }]
      }
    };
    expect((0, _getIn.default)(state, 'foo.bar[0]')).toBe('baz');
    expect((0, _getIn.default)(state, 'foo.bar[1].dog')).toBe(42);
  });
  it('should get a value nested 1 level', function () {
    expect((0, _getIn.default)({
      foo: {
        bar: 42
      }
    }, 'foo.bar')).toBe(42);
  });
  it('should get a value nested 2 levels', function () {
    expect((0, _getIn.default)({
      foo: {
        bar: {
          baz: 42
        }
      }
    }, 'foo.bar.baz')).toBe(42);
  });
  it('should get a value nested 3 levels', function () {
    expect((0, _getIn.default)({
      foo: {
        bar: {
          baz: {
            yolanda: 42
          }
        }
      }
    }, 'foo.bar.baz.yolanda')).toBe(42);
  });
  it('should return undefined if the requested level does not exist', function () {
    expect((0, _getIn.default)({}, 'foo')).toBe(undefined);
    expect((0, _getIn.default)({}, 'foo.bar')).toBe(undefined);
    expect((0, _getIn.default)({}, 'foo.bar.baz')).toBe(undefined);
    expect((0, _getIn.default)({}, 'foo.bar.baz.yolanda')).toBe(undefined);
  });
  it('should return undefined for invalid/empty path', function () {
    expect((0, _getIn.default)({
      foo: 42
    }, undefined)).toBe(undefined);
    expect((0, _getIn.default)({
      foo: 42
    }, null)).toBe(undefined);
    expect((0, _getIn.default)({
      foo: 42
    }, '')).toBe(undefined);
  });
  it('should get string keys on arrays', function () {
    var array = [1, 2, 3];
    array.stringKey = 'hello';
    var state = {
      foo: {
        bar: array
      }
    };
    expect((0, _getIn.default)(state, 'foo.bar[0]')).toBe(1);
    expect((0, _getIn.default)(state, 'foo.bar[1]')).toBe(2);
    expect((0, _getIn.default)(state, 'foo.bar[2]')).toBe(3);
    expect((0, _getIn.default)(state, 'foo.bar.stringKey')).toBe('hello');
  });
});