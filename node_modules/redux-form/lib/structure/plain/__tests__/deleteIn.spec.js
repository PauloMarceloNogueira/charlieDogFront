"use strict";

var _deleteIn = _interopRequireDefault(require("../deleteIn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.plain.deleteIn', function () {
  it('should not return state if path not found', function () {
    var state = {
      foo: 'bar'
    };
    expect((0, _deleteIn.default)(state, undefined)).toBe(state);
    expect((0, _deleteIn.default)(state, 'dog')).toBe(state);
    expect((0, _deleteIn.default)(state, 'cat.rat.pig')).toBe(state);
  });
  it('should do nothing if array index out of bounds', function () {
    var state = {
      foo: [{
        bar: ['dog']
      }]
    };
    expect((0, _deleteIn.default)(state, 'foo[2].bar[0]')).toEqual(state);
    expect((0, _deleteIn.default)(state, 'foo[0].bar[2]')).toEqual(state);
  });
  it('should throw exception for non-numerical array indexes', function () {
    expect(function () {
      return (0, _deleteIn.default)({
        foo: ['dog']
      }, 'foo[bar]');
    }).toThrow(/non-numerical index/);
    expect(function () {
      return (0, _deleteIn.default)({
        foo: [{
          dog: 'fido'
        }]
      }, 'foo[bar].dog');
    }).toThrow(/array elements with a number/);
  });
  it('should delete shallow keys without mutating state', function () {
    var state = {
      foo: 'bar',
      dog: 'fido'
    };
    expect((0, _deleteIn.default)(state, 'foo')).not.toBe(state);
    expect((0, _deleteIn.default)(state, 'foo')).toEqual({
      dog: 'fido'
    });
    expect((0, _deleteIn.default)(state, 'dog')).not.toBe(state);
    expect((0, _deleteIn.default)(state, 'dog')).toEqual({
      foo: 'bar'
    });
  });
  it('should delete shallow array indexes without mutating state', function () {
    var state = ['the', 'quick', 'brown', 'fox'];
    expect((0, _deleteIn.default)(state, 4)).toBe(state); // index not found

    expect((0, _deleteIn.default)(state, 0)).not.toBe(state);
    expect((0, _deleteIn.default)(state, 0)).toEqual(['quick', 'brown', 'fox']);
    expect((0, _deleteIn.default)(state, 1)).not.toBe(state);
    expect((0, _deleteIn.default)(state, 1)).toEqual(['the', 'brown', 'fox']);
    expect((0, _deleteIn.default)(state, 2)).not.toBe(state);
    expect((0, _deleteIn.default)(state, 2)).toEqual(['the', 'quick', 'fox']);
    expect((0, _deleteIn.default)(state, 3)).not.toBe(state);
    expect((0, _deleteIn.default)(state, 3)).toEqual(['the', 'quick', 'brown']);
  });
  it('should delete deep keys without mutating state', function () {
    var state = {
      foo: {
        bar: ['baz', {
          dog: 42
        }]
      }
    };
    var result1 = (0, _deleteIn.default)(state, 'foo.bar[0]');
    expect(result1).not.toBe(state);
    expect(result1).toEqual({
      foo: {
        bar: [{
          dog: 42
        }]
      }
    });
    expect(result1.foo).not.toBe(state.foo);
    expect(result1.foo.bar).not.toBe(state.foo.bar);
    expect(result1.foo.bar.length).toBe(1);
    expect(result1.foo.bar[0]).toBe(state.foo.bar[1]);
    var result2 = (0, _deleteIn.default)(state, 'foo.bar[1].dog');
    expect(result2).not.toBe(state);
    expect(result2).toEqual({
      foo: {
        bar: ['baz', {}]
      }
    });
    expect(result2.foo).not.toBe(state.foo);
    expect(result2.foo.bar).not.toBe(state.foo.bar);
    expect(result2.foo.bar[0]).toBe(state.foo.bar[0]);
    expect(result2.foo.bar[1]).not.toBe(state.foo.bar[1]);
    var result3 = (0, _deleteIn.default)(state, 'foo.bar');
    expect(result3).not.toBe(state);
    expect(result3).toEqual({
      foo: {}
    });
    expect(result3.foo).not.toBe(state.foo);
  });
  it("should not mutate deep state if can't find final key", function () {
    var state = {
      foo: {
        bar: [{}]
      }
    };
    var result = (0, _deleteIn.default)(state, 'foo.bar[0].dog');
    expect(result).toBe(state);
    expect(result).toEqual({
      foo: {
        bar: [{}]
      }
    });
    expect(result.foo).toBe(state.foo);
    expect(result.foo.bar).toBe(state.foo.bar);
    expect(result.foo.bar[0]).toBe(state.foo.bar[0]);
  });
});