"use strict";

var _immutable = require("immutable");

var _setIn = _interopRequireDefault(require("../setIn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.immutable.setIn', function () {
  it('should handle undefined', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), undefined, 'success');
    expect(result).toEqual('success');
  });
  it('should handle dot paths', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b.c', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var c = b.get('c');
    expect(c).toEqual('success');
  });
  it('should handle array paths', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[0]', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    expect(b).toEqual((0, _immutable.fromJS)(['success']));
  });
  it('should handle nested array paths', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[2][1]', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    var b2 = b.get(2);
    expect(b2).toBeInstanceOf(_immutable.List);
    expect(b2).toEqual((0, _immutable.fromJS)([undefined, 'success']));
  });
  it('should handle array paths with successive sets', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[2]', 'success');
    result = (0, _setIn.default)(result, 'a.b[0]', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    expect(b).toEqual((0, _immutable.fromJS)(['success', undefined, 'success']));
  });
  it('should handle array paths with existing array', function () {
    var result = (0, _setIn.default)(new _immutable.Map({
      a: new _immutable.Map({
        b: new _immutable.List(['first'])
      })
    }), 'a.b[1].value', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    expect(b).toEqual((0, _immutable.fromJS)(['first', {
      value: 'success'
    }]));
  });
  it('should handle array paths with existing array with undefined', function () {
    var result = (0, _setIn.default)(new _immutable.Map({
      a: new _immutable.Map({
        b: new _immutable.List(['first', undefined])
      })
    }), 'a.b[1].value', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    expect(b).toEqual((0, _immutable.fromJS)(['first', {
      value: 'success'
    }]));
  });
  it('should handle multiple array paths', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[0].c.d[13].e', 'success');
    var a = result.get('a');
    expect(a).toBeInstanceOf(_immutable.Map);
    var b = a.get('b');
    expect(b).toBeInstanceOf(_immutable.List);
    var b0 = b.get(0);
    expect(b0).toBeInstanceOf(_immutable.Map);
    var c = b0.get('c');
    expect(c).toBeInstanceOf(_immutable.Map);
    var d = c.get('d');
    expect(d).toBeInstanceOf(_immutable.List);
    var d13 = d.get(13);
    expect(d13).toBeInstanceOf(_immutable.Map);
    var e = d13.get('e');
    expect(e).toEqual('success');
  });
  it('should handle indexer paths', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[c].d[e]', 'success');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var c = b.get('c');
    expect(c).toBeTruthy();
    var d = c.get('d');
    expect(d).toBeTruthy();
    var e = d.get('e');
    expect(e).toEqual('success');
  });
  it('should update existing Map', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: {
          c: 'one'
        }
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b.c', 'two');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var c = b.get('c');
    expect(c).toEqual('two');
  });
  it('should update existing List', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: [{
          c: 'one'
        }]
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[0].c', 'two');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b0 = b.get(0);
    expect(b0).toBeTruthy();
    var b0c = b0.get('c');
    expect(b0c).toEqual('two');
  });
  it('should not break existing Map', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: {
          c: 'one'
        }
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b.d', 'two');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var c = b.get('c');
    expect(c).toEqual('one');
    var d = b.get('d');
    expect(d).toEqual('two');
  });
  it('should not break existing List', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: [{
          c: 'one'
        }, {
          c: 'two'
        }]
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[0].c', 'changed');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b0 = b.get(0);
    expect(b0).toBeTruthy();
    var b0c = b0.get('c');
    expect(b0c).toEqual('changed');
    var b1 = b.get(1);
    expect(b1).toBeTruthy();
    var b1c = b1.get('c');
    expect(b1c).toEqual('two');
  });
  it('should add to an existing List', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: [{
          c: 'one'
        }, {
          c: 'two'
        }]
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[2].c', 'three');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b0 = b.get(0);
    expect(b0).toBeTruthy();
    var b0c = b0.get('c');
    expect(b0c).toEqual('one');
    var b1 = b.get(1);
    expect(b1).toBeTruthy();
    var b1c = b1.get('c');
    expect(b1c).toEqual('two');
    var b2 = b.get(2);
    expect(b2).toBeTruthy();
    var b2c = b2.get('c');
    expect(b2c).toEqual('three');
  });
  it('should set a value directly on new list', function () {
    var result = (0, _setIn.default)(new _immutable.Map(), 'a.b[2]', 'three');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b0 = b.get(0);
    expect(b0).toEqual(undefined);
    var b1 = b.get(1);
    expect(b1).toEqual(undefined);
    var b2 = b.get(2);
    expect(b2).toEqual('three');
  });
  it('should add to an existing List item', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: [{
          c: '123'
        }]
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[0].d', '12');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b0 = b.get(0);
    expect(b0).toBeTruthy();
    var b0d = b0.get('d');
    expect(b0d).toEqual('12');
    var b0c = b0.get('c');
    expect(b0c).toEqual('123');
  });
  it('should handle arrays with length 65', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: []
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[64].d', '12');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b64 = b.get(64);
    expect(b64).toBeTruthy();
    var b64d = b64.get('d');
    expect(b64d).toEqual('12');
  });
  it('should handle arrays with length 65 with existing content', function () {
    var initial = (0, _immutable.fromJS)({
      a: {
        b: [undefined, undefined, 'val']
      }
    });
    var result = (0, _setIn.default)(initial, 'a.b[64].d', '12');
    expect(result.getIn(['a', 'b', 2])).toEqual('val');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var b64 = b.get(64);
    expect(b64).toBeTruthy();
    var b64d = b64.get('d');
    expect(b64d).toEqual('12');
  });
  it('should not break existing partially initialized Map', function () {
    var initial = (0, _immutable.fromJS)({
      a: null,
      d: 'val-d'
    }); //let initialState = setIn(initial)

    var result = (0, _setIn.default)(initial, 'a.b.c', 'val');
    var a = result.get('a');
    expect(a).toBeTruthy();
    var b = a.get('b');
    expect(b).toBeTruthy();
    var c = b.get('c');
    expect(c).toEqual('val');
    var d = result.get('d');
    expect(d).toEqual('val-d');
  });
});