"use strict";

var _immutable = require("immutable");

var _splice = _interopRequireDefault(require("../splice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('structure.immutable.splice', function () {
  var testInsertWithValue = function testInsertWithValue(value) {
    it('should insert even when initial array is undefined', function () {
      var structure = (0, _splice.default)(undefined, 2, 0, value);
      expect(structure).toBeInstanceOf(_immutable.List);
      expect(structure).toEqual((0, _immutable.fromJS)([undefined, undefined, value]));
    });
    it('should insert at start', function () {
      var structure = (0, _splice.default)((0, _immutable.fromJS)(['b', 'c', 'd']), 0, 0, value);
      expect(structure).toBeInstanceOf(_immutable.List);
      expect(structure).toEqual((0, _immutable.fromJS)([value, 'b', 'c', 'd']));
    });
    it('should insert at end', function () {
      var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c']), 3, 0, value);
      expect(structure).toBeInstanceOf(_immutable.List);
      expect(structure).toEqual((0, _immutable.fromJS)(['a', 'b', 'c', value]));
    });
    it('should insert in middle', function () {
      var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'd']), 2, 0, value);
      expect(structure).toBeInstanceOf(_immutable.List);
      expect(structure).toEqual((0, _immutable.fromJS)(['a', 'b', value, 'd']));
    });
    it('should insert in out of range', function () {
      var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c']), 5, 0, value);
      expect(structure).toBeInstanceOf(_immutable.List);
      expect(structure).toEqual((0, _immutable.fromJS)(['a', 'b', 'c', undefined, undefined, value]));
    });
  };

  testInsertWithValue('value');
  testInsertWithValue(undefined);
  it('should return empty array when removing and initial array is undefined', function () {
    var structure = (0, _splice.default)(undefined, 2, 1);
    expect(structure).toBeInstanceOf(_immutable.List);
    expect(structure).toEqual((0, _immutable.fromJS)([]));
  });
  it('should remove at start', function () {
    var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c', 'd']), 0, 1);
    expect(structure).toBeInstanceOf(_immutable.List);
    expect(structure).toEqual((0, _immutable.fromJS)(['b', 'c', 'd']));
  });
  it('should remove in the middle then insert in that position', function () {
    var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c', 'd']), 1, 1, 'e');
    expect(structure).toBeInstanceOf(_immutable.List);
    expect(structure).toEqual((0, _immutable.fromJS)(['a', 'e', 'c', 'd']));
  });
  it('should remove at end', function () {
    var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c', 'd']), 3, 1);
    expect(structure).toBeInstanceOf(_immutable.List);
    expect(structure).toEqual((0, _immutable.fromJS)(['a', 'b', 'c']));
  });
  it('should remove in middle', function () {
    var structure = (0, _splice.default)((0, _immutable.fromJS)(['a', 'b', 'c', 'd']), 2, 1);
    expect(structure).toBeInstanceOf(_immutable.List);
    expect(structure).toEqual((0, _immutable.fromJS)(['a', 'b', 'd']));
  });
});